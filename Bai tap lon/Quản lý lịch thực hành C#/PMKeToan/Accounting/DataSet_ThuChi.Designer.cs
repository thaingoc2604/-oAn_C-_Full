//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace Accounting {
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("DataSet1")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class DataSet1 : System.Data.DataSet {
        
        private TongHopDataTable tableTongHop;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DataSet1() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected DataSet1(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["TongHop"] != null)) {
                    base.Tables.Add(new TongHopDataTable(ds.Tables["TongHop"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TongHopDataTable TongHop {
            get {
                return this.tableTongHop;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.BrowsableAttribute(true)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataSet Clone() {
            DataSet1 cln = ((DataSet1)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["TongHop"] != null)) {
                    base.Tables.Add(new TongHopDataTable(ds.Tables["TongHop"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableTongHop = ((TongHopDataTable)(base.Tables["TongHop"]));
            if ((initTable == true)) {
                if ((this.tableTongHop != null)) {
                    this.tableTongHop.InitVars();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "DataSet1";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/DataSet1.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableTongHop = new TongHopDataTable();
            base.Tables.Add(this.tableTongHop);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTongHop() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            DataSet1 ds = new DataSet1();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void TongHopRowChangeEventHandler(object sender, TongHopRowChangeEvent e);
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TongHopDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnSTT;
            
            private System.Data.DataColumn columnNGAYTHANG;
            
            private System.Data.DataColumn columnMAPHIEUTHU;
            
            private System.Data.DataColumn columnMAPHIEUCHI;
            
            private System.Data.DataColumn columnDIENGIAI;
            
            private System.Data.DataColumn columnSOTIENTHU;
            
            private System.Data.DataColumn columnSOTIENCHI;
            
            private System.Data.DataColumn columnSOTON;
            
            private System.Data.DataColumn columnMALOAIPHIEU;
            
            private System.Data.DataColumn columnTongThuTrongKy;
            
            private System.Data.DataColumn columnTongChiTrongKy;
            
            private System.Data.DataColumn columnTongChiTrongNam;
            
            private System.Data.DataColumn columnTongThuTrongNam;
            
            private System.Data.DataColumn columnTongChiTrongQuy;
            
            private System.Data.DataColumn columnTongThuTrongQuy;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TongHopDataTable() {
                this.TableName = "TongHop";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TongHopDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TongHopDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn STTColumn {
                get {
                    return this.columnSTT;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NGAYTHANGColumn {
                get {
                    return this.columnNGAYTHANG;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn MAPHIEUTHUColumn {
                get {
                    return this.columnMAPHIEUTHU;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn MAPHIEUCHIColumn {
                get {
                    return this.columnMAPHIEUCHI;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DIENGIAIColumn {
                get {
                    return this.columnDIENGIAI;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SOTIENTHUColumn {
                get {
                    return this.columnSOTIENTHU;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SOTIENCHIColumn {
                get {
                    return this.columnSOTIENCHI;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SOTONColumn {
                get {
                    return this.columnSOTON;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn MALOAIPHIEUColumn {
                get {
                    return this.columnMALOAIPHIEU;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TongThuTrongKyColumn {
                get {
                    return this.columnTongThuTrongKy;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TongChiTrongKyColumn {
                get {
                    return this.columnTongChiTrongKy;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TongChiTrongNamColumn {
                get {
                    return this.columnTongChiTrongNam;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TongThuTrongNamColumn {
                get {
                    return this.columnTongThuTrongNam;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TongChiTrongQuyColumn {
                get {
                    return this.columnTongChiTrongQuy;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TongThuTrongQuyColumn {
                get {
                    return this.columnTongThuTrongQuy;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TongHopRow this[int index] {
                get {
                    return ((TongHopRow)(this.Rows[index]));
                }
            }
            
            public event TongHopRowChangeEventHandler TongHopRowChanging;
            
            public event TongHopRowChangeEventHandler TongHopRowChanged;
            
            public event TongHopRowChangeEventHandler TongHopRowDeleting;
            
            public event TongHopRowChangeEventHandler TongHopRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTongHopRow(TongHopRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TongHopRow AddTongHopRow(string STT, string NGAYTHANG, string MAPHIEUTHU, string MAPHIEUCHI, string DIENGIAI, string SOTIENTHU, string SOTIENCHI, string SOTON, string MALOAIPHIEU, int TongThuTrongKy, int TongChiTrongKy, int TongChiTrongNam, int TongThuTrongNam, int TongChiTrongQuy, int TongThuTrongQuy) {
                TongHopRow rowTongHopRow = ((TongHopRow)(this.NewRow()));
                rowTongHopRow.ItemArray = new object[] {
                        STT,
                        NGAYTHANG,
                        MAPHIEUTHU,
                        MAPHIEUCHI,
                        DIENGIAI,
                        SOTIENTHU,
                        SOTIENCHI,
                        SOTON,
                        MALOAIPHIEU,
                        TongThuTrongKy,
                        TongChiTrongKy,
                        TongChiTrongNam,
                        TongThuTrongNam,
                        TongChiTrongQuy,
                        TongThuTrongQuy};
                this.Rows.Add(rowTongHopRow);
                return rowTongHopRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                TongHopDataTable cln = ((TongHopDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new TongHopDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSTT = base.Columns["STT"];
                this.columnNGAYTHANG = base.Columns["NGAYTHANG"];
                this.columnMAPHIEUTHU = base.Columns["MAPHIEUTHU"];
                this.columnMAPHIEUCHI = base.Columns["MAPHIEUCHI"];
                this.columnDIENGIAI = base.Columns["DIENGIAI"];
                this.columnSOTIENTHU = base.Columns["SOTIENTHU"];
                this.columnSOTIENCHI = base.Columns["SOTIENCHI"];
                this.columnSOTON = base.Columns["SOTON"];
                this.columnMALOAIPHIEU = base.Columns["MALOAIPHIEU"];
                this.columnTongThuTrongKy = base.Columns["TongThuTrongKy"];
                this.columnTongChiTrongKy = base.Columns["TongChiTrongKy"];
                this.columnTongChiTrongNam = base.Columns["TongChiTrongNam"];
                this.columnTongThuTrongNam = base.Columns["TongThuTrongNam"];
                this.columnTongChiTrongQuy = base.Columns["TongChiTrongQuy"];
                this.columnTongThuTrongQuy = base.Columns["TongThuTrongQuy"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSTT = new System.Data.DataColumn("STT", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSTT);
                this.columnNGAYTHANG = new System.Data.DataColumn("NGAYTHANG", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNGAYTHANG);
                this.columnMAPHIEUTHU = new System.Data.DataColumn("MAPHIEUTHU", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnMAPHIEUTHU);
                this.columnMAPHIEUCHI = new System.Data.DataColumn("MAPHIEUCHI", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnMAPHIEUCHI);
                this.columnDIENGIAI = new System.Data.DataColumn("DIENGIAI", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDIENGIAI);
                this.columnSOTIENTHU = new System.Data.DataColumn("SOTIENTHU", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSOTIENTHU);
                this.columnSOTIENCHI = new System.Data.DataColumn("SOTIENCHI", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSOTIENCHI);
                this.columnSOTON = new System.Data.DataColumn("SOTON", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSOTON);
                this.columnMALOAIPHIEU = new System.Data.DataColumn("MALOAIPHIEU", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnMALOAIPHIEU);
                this.columnTongThuTrongKy = new System.Data.DataColumn("TongThuTrongKy", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTongThuTrongKy);
                this.columnTongChiTrongKy = new System.Data.DataColumn("TongChiTrongKy", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTongChiTrongKy);
                this.columnTongChiTrongNam = new System.Data.DataColumn("TongChiTrongNam", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTongChiTrongNam);
                this.columnTongThuTrongNam = new System.Data.DataColumn("TongThuTrongNam", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTongThuTrongNam);
                this.columnTongChiTrongQuy = new System.Data.DataColumn("TongChiTrongQuy", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTongChiTrongQuy);
                this.columnTongThuTrongQuy = new System.Data.DataColumn("TongThuTrongQuy", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTongThuTrongQuy);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TongHopRow NewTongHopRow() {
                return ((TongHopRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new TongHopRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(TongHopRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TongHopRowChanged != null)) {
                    this.TongHopRowChanged(this, new TongHopRowChangeEvent(((TongHopRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TongHopRowChanging != null)) {
                    this.TongHopRowChanging(this, new TongHopRowChangeEvent(((TongHopRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TongHopRowDeleted != null)) {
                    this.TongHopRowDeleted(this, new TongHopRowChangeEvent(((TongHopRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TongHopRowDeleting != null)) {
                    this.TongHopRowDeleting(this, new TongHopRowChangeEvent(((TongHopRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTongHopRow(TongHopRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DataSet1 ds = new DataSet1();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TongHopDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TongHopRow : System.Data.DataRow {
            
            private TongHopDataTable tableTongHop;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TongHopRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTongHop = ((TongHopDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string STT {
                get {
                    try {
                        return ((string)(this[this.tableTongHop.STTColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'STT\' in table \'TongHop\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTongHop.STTColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NGAYTHANG {
                get {
                    try {
                        return ((string)(this[this.tableTongHop.NGAYTHANGColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'NGAYTHANG\' in table \'TongHop\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTongHop.NGAYTHANGColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MAPHIEUTHU {
                get {
                    try {
                        return ((string)(this[this.tableTongHop.MAPHIEUTHUColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'MAPHIEUTHU\' in table \'TongHop\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTongHop.MAPHIEUTHUColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MAPHIEUCHI {
                get {
                    try {
                        return ((string)(this[this.tableTongHop.MAPHIEUCHIColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'MAPHIEUCHI\' in table \'TongHop\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTongHop.MAPHIEUCHIColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DIENGIAI {
                get {
                    try {
                        return ((string)(this[this.tableTongHop.DIENGIAIColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DIENGIAI\' in table \'TongHop\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTongHop.DIENGIAIColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SOTIENTHU {
                get {
                    try {
                        return ((string)(this[this.tableTongHop.SOTIENTHUColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'SOTIENTHU\' in table \'TongHop\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTongHop.SOTIENTHUColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SOTIENCHI {
                get {
                    try {
                        return ((string)(this[this.tableTongHop.SOTIENCHIColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'SOTIENCHI\' in table \'TongHop\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTongHop.SOTIENCHIColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SOTON {
                get {
                    try {
                        return ((string)(this[this.tableTongHop.SOTONColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'SOTON\' in table \'TongHop\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTongHop.SOTONColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MALOAIPHIEU {
                get {
                    try {
                        return ((string)(this[this.tableTongHop.MALOAIPHIEUColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'MALOAIPHIEU\' in table \'TongHop\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTongHop.MALOAIPHIEUColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TongThuTrongKy {
                get {
                    try {
                        return ((int)(this[this.tableTongHop.TongThuTrongKyColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'TongThuTrongKy\' in table \'TongHop\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTongHop.TongThuTrongKyColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TongChiTrongKy {
                get {
                    try {
                        return ((int)(this[this.tableTongHop.TongChiTrongKyColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'TongChiTrongKy\' in table \'TongHop\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTongHop.TongChiTrongKyColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TongChiTrongNam {
                get {
                    try {
                        return ((int)(this[this.tableTongHop.TongChiTrongNamColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'TongChiTrongNam\' in table \'TongHop\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTongHop.TongChiTrongNamColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TongThuTrongNam {
                get {
                    try {
                        return ((int)(this[this.tableTongHop.TongThuTrongNamColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'TongThuTrongNam\' in table \'TongHop\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTongHop.TongThuTrongNamColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TongChiTrongQuy {
                get {
                    try {
                        return ((int)(this[this.tableTongHop.TongChiTrongQuyColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'TongChiTrongQuy\' in table \'TongHop\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTongHop.TongChiTrongQuyColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TongThuTrongQuy {
                get {
                    try {
                        return ((int)(this[this.tableTongHop.TongThuTrongQuyColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'TongThuTrongQuy\' in table \'TongHop\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTongHop.TongThuTrongQuyColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSTTNull() {
                return this.IsNull(this.tableTongHop.STTColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSTTNull() {
                this[this.tableTongHop.STTColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNGAYTHANGNull() {
                return this.IsNull(this.tableTongHop.NGAYTHANGColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNGAYTHANGNull() {
                this[this.tableTongHop.NGAYTHANGColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMAPHIEUTHUNull() {
                return this.IsNull(this.tableTongHop.MAPHIEUTHUColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMAPHIEUTHUNull() {
                this[this.tableTongHop.MAPHIEUTHUColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMAPHIEUCHINull() {
                return this.IsNull(this.tableTongHop.MAPHIEUCHIColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMAPHIEUCHINull() {
                this[this.tableTongHop.MAPHIEUCHIColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDIENGIAINull() {
                return this.IsNull(this.tableTongHop.DIENGIAIColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDIENGIAINull() {
                this[this.tableTongHop.DIENGIAIColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSOTIENTHUNull() {
                return this.IsNull(this.tableTongHop.SOTIENTHUColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSOTIENTHUNull() {
                this[this.tableTongHop.SOTIENTHUColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSOTIENCHINull() {
                return this.IsNull(this.tableTongHop.SOTIENCHIColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSOTIENCHINull() {
                this[this.tableTongHop.SOTIENCHIColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSOTONNull() {
                return this.IsNull(this.tableTongHop.SOTONColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSOTONNull() {
                this[this.tableTongHop.SOTONColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMALOAIPHIEUNull() {
                return this.IsNull(this.tableTongHop.MALOAIPHIEUColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMALOAIPHIEUNull() {
                this[this.tableTongHop.MALOAIPHIEUColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTongThuTrongKyNull() {
                return this.IsNull(this.tableTongHop.TongThuTrongKyColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTongThuTrongKyNull() {
                this[this.tableTongHop.TongThuTrongKyColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTongChiTrongKyNull() {
                return this.IsNull(this.tableTongHop.TongChiTrongKyColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTongChiTrongKyNull() {
                this[this.tableTongHop.TongChiTrongKyColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTongChiTrongNamNull() {
                return this.IsNull(this.tableTongHop.TongChiTrongNamColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTongChiTrongNamNull() {
                this[this.tableTongHop.TongChiTrongNamColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTongThuTrongNamNull() {
                return this.IsNull(this.tableTongHop.TongThuTrongNamColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTongThuTrongNamNull() {
                this[this.tableTongHop.TongThuTrongNamColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTongChiTrongQuyNull() {
                return this.IsNull(this.tableTongHop.TongChiTrongQuyColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTongChiTrongQuyNull() {
                this[this.tableTongHop.TongChiTrongQuyColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTongThuTrongQuyNull() {
                return this.IsNull(this.tableTongHop.TongThuTrongQuyColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTongThuTrongQuyNull() {
                this[this.tableTongHop.TongThuTrongQuyColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TongHopRowChangeEvent : System.EventArgs {
            
            private TongHopRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TongHopRowChangeEvent(TongHopRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TongHopRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591