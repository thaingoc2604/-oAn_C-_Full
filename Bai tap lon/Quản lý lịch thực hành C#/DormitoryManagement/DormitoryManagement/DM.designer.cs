#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DormitoryManagement
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="Dormitory")]
	public partial class DMDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InserttblElectricity(tblElectricity instance);
    partial void UpdatetblElectricity(tblElectricity instance);
    partial void DeletetblElectricity(tblElectricity instance);
    partial void InserttblWater(tblWater instance);
    partial void UpdatetblWater(tblWater instance);
    partial void DeletetblWater(tblWater instance);
    partial void InserttblFee(tblFee instance);
    partial void UpdatetblFee(tblFee instance);
    partial void DeletetblFee(tblFee instance);
    partial void InserttblGuest(tblGuest instance);
    partial void UpdatetblGuest(tblGuest instance);
    partial void DeletetblGuest(tblGuest instance);
    partial void InserttblPrivilege(tblPrivilege instance);
    partial void UpdatetblPrivilege(tblPrivilege instance);
    partial void DeletetblPrivilege(tblPrivilege instance);
    partial void InserttblReceipt(tblReceipt instance);
    partial void UpdatetblReceipt(tblReceipt instance);
    partial void DeletetblReceipt(tblReceipt instance);
    partial void InserttblReceiptStatus(tblReceiptStatus instance);
    partial void UpdatetblReceiptStatus(tblReceiptStatus instance);
    partial void DeletetblReceiptStatus(tblReceiptStatus instance);
    partial void InserttblRoom(tblRoom instance);
    partial void UpdatetblRoom(tblRoom instance);
    partial void DeletetblRoom(tblRoom instance);
    partial void InserttblRoomType(tblRoomType instance);
    partial void UpdatetblRoomType(tblRoomType instance);
    partial void DeletetblRoomType(tblRoomType instance);
    partial void InserttblStatus(tblStatus instance);
    partial void UpdatetblStatus(tblStatus instance);
    partial void DeletetblStatus(tblStatus instance);
    partial void InserttblUser(tblUser instance);
    partial void UpdatetblUser(tblUser instance);
    partial void DeletetblUser(tblUser instance);
    #endregion
		
		public DMDataContext() : 
				base(global::DormitoryManagement.Properties.Settings.Default.DormitoryConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DMDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DMDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DMDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DMDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<tblElectricity> tblElectricities
		{
			get
			{
				return this.GetTable<tblElectricity>();
			}
		}
		
		public System.Data.Linq.Table<tblWater> tblWaters
		{
			get
			{
				return this.GetTable<tblWater>();
			}
		}
		
		public System.Data.Linq.Table<tblFee> tblFees
		{
			get
			{
				return this.GetTable<tblFee>();
			}
		}
		
		public System.Data.Linq.Table<tblGuest> tblGuests
		{
			get
			{
				return this.GetTable<tblGuest>();
			}
		}
		
		public System.Data.Linq.Table<tblPrivilege> tblPrivileges
		{
			get
			{
				return this.GetTable<tblPrivilege>();
			}
		}
		
		public System.Data.Linq.Table<tblReceipt> tblReceipts
		{
			get
			{
				return this.GetTable<tblReceipt>();
			}
		}
		
		public System.Data.Linq.Table<tblReceiptStatus> tblReceiptStatus
		{
			get
			{
				return this.GetTable<tblReceiptStatus>();
			}
		}
		
		public System.Data.Linq.Table<tblRoom> tblRooms
		{
			get
			{
				return this.GetTable<tblRoom>();
			}
		}
		
		public System.Data.Linq.Table<tblRoomType> tblRoomTypes
		{
			get
			{
				return this.GetTable<tblRoomType>();
			}
		}
		
		public System.Data.Linq.Table<tblStatus> tblStatus
		{
			get
			{
				return this.GetTable<tblStatus>();
			}
		}
		
		public System.Data.Linq.Table<tblUser> tblUsers
		{
			get
			{
				return this.GetTable<tblUser>();
			}
		}
		
		[Function(Name="dbo.spuAddGuest")]
		public int spuAddGuest([Parameter(Name="CustomerName", DbType="NVarChar(50)")] string customerName, [Parameter(Name="Address", DbType="NVarChar(200)")] string address, [Parameter(Name="Birthday", DbType="VarChar(20)")] string birthday, [Parameter(Name="Sex", DbType="Bit")] System.Nullable<bool> sex, [Parameter(Name="RoomID", DbType="Int")] System.Nullable<int> roomID, [Parameter(Name="Telephone", DbType="NVarChar(20)")] string telephone, [Parameter(Name="MobilePhone", DbType="NVarChar(20)")] string mobilePhone, [Parameter(Name="Photo", DbType="NVarChar(200)")] string photo, [Parameter(Name="Note", DbType="NVarChar(100)")] string note)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), customerName, address, birthday, sex, roomID, telephone, mobilePhone, photo, note);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.spuAddReceipt")]
		public int spuAddReceipt([Parameter(Name="RoomID", DbType="Int")] System.Nullable<int> roomID, [Parameter(Name="RoomFee", DbType="Decimal")] System.Nullable<decimal> roomFee, [Parameter(Name="WaterFee", DbType="Decimal")] System.Nullable<decimal> waterFee, [Parameter(Name="ElectricFee", DbType="Decimal")] System.Nullable<decimal> electricFee, [Parameter(Name="OtherFee", DbType="Decimal")] System.Nullable<decimal> otherFee, [Parameter(Name="Note", DbType="NVarChar(50)")] string note, [Parameter(Name="Debt", DbType="Decimal")] System.Nullable<decimal> debt, [Parameter(Name="Date", DbType="NVarChar(20)")] string date, [Parameter(Name="StatusID", DbType="Int")] System.Nullable<int> statusID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), roomID, roomFee, waterFee, electricFee, otherFee, note, debt, date, statusID);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.spuAddRoom")]
		public int spuAddRoom([Parameter(Name="Name", DbType="NVarChar(10)")] string name, [Parameter(Name="TypeID", DbType="Int")] System.Nullable<int> typeID, [Parameter(Name="Status", DbType="Int")] System.Nullable<int> status, [Parameter(Name="Capacity", DbType="Int")] System.Nullable<int> capacity, [Parameter(Name="ComingDate", DbType="VarChar(20)")] string comingDate, [Parameter(Name="ElectricNo", DbType="Int")] System.Nullable<int> electricNo, [Parameter(Name="WaterNo", DbType="Int")] System.Nullable<int> waterNo)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), name, typeID, status, capacity, comingDate, electricNo, waterNo);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.spuAddRoomType")]
		public int spuAddRoomType([Parameter(Name="TypeName", DbType="NVarChar(50)")] string typeName, [Parameter(Name="Price", DbType="Decimal")] System.Nullable<decimal> price)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), typeName, price);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.spuAddStatus")]
		public int spuAddStatus([Parameter(Name="StatusName", DbType="NVarChar(50)")] string statusName)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), statusName);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.spuDeleteGuest")]
		public int spuDeleteGuest([Parameter(Name="ID", DbType="Int")] System.Nullable<int> iD)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iD);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.spuDeleteReceipt")]
		public int spuDeleteReceipt([Parameter(Name="ReceiptID", DbType="Int")] System.Nullable<int> receiptID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), receiptID);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.spuDeleteRoom")]
		public int spuDeleteRoom([Parameter(Name="RoomID", DbType="Int")] System.Nullable<int> roomID, [Parameter(Name="Info", DbType="NVarChar(100)")] ref string info)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), roomID, info);
			info = ((string)(result.GetParameterValue(1)));
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.spuDeleteRoomTypeByID")]
		public int spuDeleteRoomTypeByID([Parameter(Name="TypeID", DbType="Int")] System.Nullable<int> typeID, [Parameter(Name="Error", DbType="NVarChar(100)")] ref string error)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), typeID, error);
			error = ((string)(result.GetParameterValue(1)));
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.spuDeleteStatus")]
		public int spuDeleteStatus([Parameter(Name="StatusID", DbType="Int")] System.Nullable<int> statusID, [Parameter(Name="Info", DbType="NVarChar(100)")] ref string info)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), statusID, info);
			info = ((string)(result.GetParameterValue(1)));
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.spuGetElectricFee")]
		public ISingleResult<spuGetElectricFeeResult> spuGetElectricFee()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<spuGetElectricFeeResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.spuGetElectricNo")]
		public ISingleResult<spuGetElectricNoResult> spuGetElectricNo([Parameter(Name="RoomID", DbType="Int")] System.Nullable<int> roomID, [Parameter(Name="Month", DbType="NVarChar(10)")] string month)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), roomID, month);
			return ((ISingleResult<spuGetElectricNoResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.spuGetGuestByID")]
		public ISingleResult<spuGetGuestByIDResult> spuGetGuestByID([Parameter(Name="ID", DbType="Int")] System.Nullable<int> iD)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iD);
			return ((ISingleResult<spuGetGuestByIDResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.spuGetGuestInRoom")]
		public int spuGetGuestInRoom([Parameter(Name="RoomID", DbType="Int")] System.Nullable<int> roomID, [Parameter(Name="Count", DbType="Int")] ref System.Nullable<int> count)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), roomID, count);
			count = ((System.Nullable<int>)(result.GetParameterValue(1)));
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.spuGetGuestList")]
		public ISingleResult<spuGetGuestListResult> spuGetGuestList()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<spuGetGuestListResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.spuGetLatestMonthReceipt")]
		public int spuGetLatestMonthReceipt([Parameter(Name="RoomID", DbType="Int")] System.Nullable<int> roomID, [Parameter(Name="Date", DbType="NVarChar(20)")] ref string date)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), roomID, date);
			date = ((string)(result.GetParameterValue(1)));
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.spuGetOldElectricNo")]
		public int spuGetOldElectricNo([Parameter(Name="RoomID", DbType="Int")] System.Nullable<int> roomID, [Parameter(Name="Month", DbType="VarChar(10)")] string month, [Parameter(Name="No", DbType="Int")] ref System.Nullable<int> no)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), roomID, month, no);
			no = ((System.Nullable<int>)(result.GetParameterValue(2)));
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.spuGetOldWaterNo")]
		public int spuGetOldWaterNo([Parameter(Name="RoomID", DbType="Int")] System.Nullable<int> roomID, [Parameter(Name="Month", DbType="VarChar(10)")] string month, [Parameter(Name="No", DbType="Int")] ref System.Nullable<int> no)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), roomID, month, no);
			no = ((System.Nullable<int>)(result.GetParameterValue(2)));
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.spuGetReceiptByID")]
		public ISingleResult<spuGetReceiptByIDResult> spuGetReceiptByID([Parameter(Name="ReceiptID", DbType="Int")] System.Nullable<int> receiptID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), receiptID);
			return ((ISingleResult<spuGetReceiptByIDResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.spuGetReceiptStatus")]
		public ISingleResult<spuGetReceiptStatusResult> spuGetReceiptStatus()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<spuGetReceiptStatusResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.spuGetRoomByID")]
		public ISingleResult<spuGetRoomByIDResult> spuGetRoomByID([Parameter(Name="RoomID", DbType="Int")] System.Nullable<int> roomID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), roomID);
			return ((ISingleResult<spuGetRoomByIDResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.spuGetRooms")]
		public ISingleResult<spuGetRoomsResult> spuGetRooms()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<spuGetRoomsResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.spuGetRoomStatus")]
		public ISingleResult<spuGetRoomStatusResult> spuGetRoomStatus()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<spuGetRoomStatusResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.spuGetRoomStatusByID")]
		public ISingleResult<spuGetRoomStatusByIDResult> spuGetRoomStatusByID([Parameter(Name="StatusID", DbType="Int")] System.Nullable<int> statusID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), statusID);
			return ((ISingleResult<spuGetRoomStatusByIDResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.spuGetRoomType")]
		public ISingleResult<spuGetRoomTypeResult> spuGetRoomType()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<spuGetRoomTypeResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.spuGetRoomTypeByID")]
		public ISingleResult<spuGetRoomTypeByIDResult> spuGetRoomTypeByID([Parameter(Name="TypeID", DbType="Int")] System.Nullable<int> typeID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), typeID);
			return ((ISingleResult<spuGetRoomTypeByIDResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.spuGetStatusByID")]
		public ISingleResult<spuGetStatusByIDResult> spuGetStatusByID([Parameter(Name="StatusID", DbType="Int")] System.Nullable<int> statusID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), statusID);
			return ((ISingleResult<spuGetStatusByIDResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.spuGetStatusIDByStatusName")]
		public ISingleResult<spuGetStatusIDByStatusNameResult> spuGetStatusIDByStatusName([Parameter(Name="StatusName", DbType="NVarChar(50)")] string statusName)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), statusName);
			return ((ISingleResult<spuGetStatusIDByStatusNameResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.spuGetUsingRoom")]
		public ISingleResult<spuGetUsingRoomResult> spuGetUsingRoom()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<spuGetUsingRoomResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.spuGetWaterFee")]
		public ISingleResult<spuGetWaterFeeResult> spuGetWaterFee()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<spuGetWaterFeeResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.spuGetWaterNo")]
		public ISingleResult<spuGetWaterNoResult> spuGetWaterNo([Parameter(Name="RoomID", DbType="Int")] System.Nullable<int> roomID, [Parameter(Name="Month", DbType="NVarChar(10)")] string month)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), roomID, month);
			return ((ISingleResult<spuGetWaterNoResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.spuUpdateElectricityFee")]
		public int spuUpdateElectricityFee([Parameter(Name="FeeCost", DbType="Decimal")] System.Nullable<decimal> feeCost)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), feeCost);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.spuUpdateGuest")]
		public int spuUpdateGuest([Parameter(Name="ID", DbType="Int")] System.Nullable<int> iD, [Parameter(Name="CustomerName", DbType="NVarChar(50)")] string customerName, [Parameter(Name="Address", DbType="NVarChar(200)")] string address, [Parameter(Name="Birthday", DbType="VarChar(20)")] string birthday, [Parameter(Name="Sex", DbType="Bit")] System.Nullable<bool> sex, [Parameter(Name="RoomID", DbType="Int")] System.Nullable<int> roomID, [Parameter(Name="Telephone", DbType="NVarChar(20)")] string telephone, [Parameter(Name="MobilePhone", DbType="NVarChar(20)")] string mobilePhone, [Parameter(Name="Photo", DbType="NVarChar(200)")] string photo, [Parameter(Name="Note", DbType="NVarChar(100)")] string note)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iD, customerName, address, birthday, sex, roomID, telephone, mobilePhone, photo, note);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.spuUpdateReceipt")]
		public int spuUpdateReceipt([Parameter(Name="ReceiptID", DbType="Int")] System.Nullable<int> receiptID, [Parameter(Name="RoomID", DbType="Int")] System.Nullable<int> roomID, [Parameter(Name="RoomFee", DbType="Decimal")] System.Nullable<decimal> roomFee, [Parameter(Name="WaterFee", DbType="Decimal")] System.Nullable<decimal> waterFee, [Parameter(Name="ElectricFee", DbType="Decimal")] System.Nullable<decimal> electricFee, [Parameter(Name="OtherFee", DbType="Decimal")] System.Nullable<decimal> otherFee, [Parameter(Name="Note", DbType="NVarChar(50)")] string note, [Parameter(Name="Debt", DbType="Decimal")] System.Nullable<decimal> debt, [Parameter(Name="Date", DbType="NVarChar(20)")] string date, [Parameter(Name="StatusID", DbType="Int")] System.Nullable<int> statusID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), receiptID, roomID, roomFee, waterFee, electricFee, otherFee, note, debt, date, statusID);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.spuUpdateRoom")]
		public int spuUpdateRoom([Parameter(Name="RoomID", DbType="Int")] System.Nullable<int> roomID, [Parameter(Name="Name", DbType="NVarChar(10)")] string name, [Parameter(Name="TypeID", DbType="Int")] System.Nullable<int> typeID, [Parameter(Name="Status", DbType="Int")] System.Nullable<int> status, [Parameter(Name="Capacity", DbType="Int")] System.Nullable<int> capacity, [Parameter(Name="ComingDate", DbType="VarChar(20)")] string comingDate, [Parameter(Name="ElectricNo", DbType="Int")] System.Nullable<int> electricNo, [Parameter(Name="WaterNo", DbType="Int")] System.Nullable<int> waterNo)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), roomID, name, typeID, status, capacity, comingDate, electricNo, waterNo);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.spuUpdateRoomComingDate")]
		public int spuUpdateRoomComingDate([Parameter(Name="RoomID", DbType="Int")] System.Nullable<int> roomID, [Parameter(Name="ComingDate", DbType="NVarChar(20)")] string comingDate)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), roomID, comingDate);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.spuUpdateRoomStatus")]
		public int spuUpdateRoomStatus([Parameter(Name="RoomID", DbType="Int")] System.Nullable<int> roomID, [Parameter(Name="Status", DbType="Int")] System.Nullable<int> status)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), roomID, status);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.spuUpdateRoomType")]
		public int spuUpdateRoomType([Parameter(Name="TypeID", DbType="Int")] System.Nullable<int> typeID, [Parameter(Name="TypeName", DbType="NVarChar(50)")] string typeName, [Parameter(Name="Price", DbType="Decimal")] System.Nullable<decimal> price)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), typeID, typeName, price);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.spuUpdateStatus")]
		public int spuUpdateStatus([Parameter(Name="StatusID", DbType="Int")] System.Nullable<int> statusID, [Parameter(Name="StatusName", DbType="NVarChar(50)")] string statusName)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), statusID, statusName);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.spuUpdateWaterFee")]
		public int spuUpdateWaterFee([Parameter(Name="FeeCost", DbType="Decimal")] System.Nullable<decimal> feeCost)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), feeCost);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.spuUpdateWaterNo")]
		public int spuUpdateWaterNo([Parameter(Name="RoomID", DbType="Int")] System.Nullable<int> roomID, [Parameter(Name="Month", DbType="VarChar(10)")] string month, [Parameter(Name="NewNumber", DbType="Int")] System.Nullable<int> newNumber)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), roomID, month, newNumber);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.spuUpdateElectricNo")]
		public int spuUpdateElectricNo([Parameter(Name="RoomID", DbType="Int")] System.Nullable<int> roomID, [Parameter(Name="Month", DbType="VarChar(10)")] string month, [Parameter(Name="NewNumber", DbType="Int")] System.Nullable<int> newNumber)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), roomID, month, newNumber);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.spuAddElectricNo")]
		public int spuAddElectricNo([Parameter(Name="RoomID", DbType="Int")] System.Nullable<int> roomID, [Parameter(Name="Month", DbType="VarChar(10)")] string month, [Parameter(Name="OldNumber", DbType="Int")] System.Nullable<int> oldNumber, [Parameter(Name="NewNumber", DbType="Int")] System.Nullable<int> newNumber)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), roomID, month, oldNumber, newNumber);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.spuAddWaterNo")]
		public int spuAddWaterNo([Parameter(Name="RoomID", DbType="Int")] System.Nullable<int> roomID, [Parameter(Name="Month", DbType="VarChar(10)")] string month, [Parameter(Name="OldNumber", DbType="Int")] System.Nullable<int> oldNumber, [Parameter(Name="NewNumber", DbType="Int")] System.Nullable<int> newNumber)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), roomID, month, oldNumber, newNumber);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.spuGetNoOfPeople")]
		public int spuGetNoOfPeople([Parameter(Name="RoomID", DbType="Int")] System.Nullable<int> roomID, [Parameter(Name="Count", DbType="Int")] ref System.Nullable<int> count)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), roomID, count);
			count = ((System.Nullable<int>)(result.GetParameterValue(1)));
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.spuDeleteWater")]
		public int spuDeleteWater([Parameter(Name="RoomID", DbType="Int")] System.Nullable<int> roomID, [Parameter(Name="Month", DbType="VarChar(10)")] string month)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), roomID, month);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.spuDeleteElectricity")]
		public int spuDeleteElectricity([Parameter(Name="RoomID", DbType="Int")] System.Nullable<int> roomID, [Parameter(Name="Month", DbType="VarChar(10)")] string month)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), roomID, month);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.spuGetReceipts")]
		public ISingleResult<spuGetReceiptsResult> spuGetReceipts()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<spuGetReceiptsResult>)(result.ReturnValue));
		}
	}
	
	[Table(Name="dbo.tblElectricity")]
	public partial class tblElectricity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RoomID;
		
		private string _Month;
		
		private int _OldNumber;
		
		private int _NewNumber;
		
		private EntityRef<tblRoom> _tblRoom;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoomIDChanging(int value);
    partial void OnRoomIDChanged();
    partial void OnMonthChanging(string value);
    partial void OnMonthChanged();
    partial void OnOldNumberChanging(int value);
    partial void OnOldNumberChanged();
    partial void OnNewNumberChanging(int value);
    partial void OnNewNumberChanged();
    #endregion
		
		public tblElectricity()
		{
			this._tblRoom = default(EntityRef<tblRoom>);
			OnCreated();
		}
		
		[Column(Storage="_RoomID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int RoomID
		{
			get
			{
				return this._RoomID;
			}
			set
			{
				if ((this._RoomID != value))
				{
					if (this._tblRoom.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoomIDChanging(value);
					this.SendPropertyChanging();
					this._RoomID = value;
					this.SendPropertyChanged("RoomID");
					this.OnRoomIDChanged();
				}
			}
		}
		
		[Column(Storage="_Month", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Month
		{
			get
			{
				return this._Month;
			}
			set
			{
				if ((this._Month != value))
				{
					this.OnMonthChanging(value);
					this.SendPropertyChanging();
					this._Month = value;
					this.SendPropertyChanged("Month");
					this.OnMonthChanged();
				}
			}
		}
		
		[Column(Storage="_OldNumber", DbType="Int NOT NULL")]
		public int OldNumber
		{
			get
			{
				return this._OldNumber;
			}
			set
			{
				if ((this._OldNumber != value))
				{
					this.OnOldNumberChanging(value);
					this.SendPropertyChanging();
					this._OldNumber = value;
					this.SendPropertyChanged("OldNumber");
					this.OnOldNumberChanged();
				}
			}
		}
		
		[Column(Storage="_NewNumber", DbType="Int NOT NULL")]
		public int NewNumber
		{
			get
			{
				return this._NewNumber;
			}
			set
			{
				if ((this._NewNumber != value))
				{
					this.OnNewNumberChanging(value);
					this.SendPropertyChanging();
					this._NewNumber = value;
					this.SendPropertyChanged("NewNumber");
					this.OnNewNumberChanged();
				}
			}
		}
		
		[Association(Name="tblRoom_tblElectricity", Storage="_tblRoom", ThisKey="RoomID", OtherKey="RoomID", IsForeignKey=true)]
		public tblRoom tblRoom
		{
			get
			{
				return this._tblRoom.Entity;
			}
			set
			{
				tblRoom previousValue = this._tblRoom.Entity;
				if (((previousValue != value) 
							|| (this._tblRoom.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblRoom.Entity = null;
						previousValue.tblElectricities.Remove(this);
					}
					this._tblRoom.Entity = value;
					if ((value != null))
					{
						value.tblElectricities.Add(this);
						this._RoomID = value.RoomID;
					}
					else
					{
						this._RoomID = default(int);
					}
					this.SendPropertyChanged("tblRoom");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.tblWater")]
	public partial class tblWater : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RoomID;
		
		private string _Month;
		
		private int _OldNumber;
		
		private int _NewNumber;
		
		private EntityRef<tblRoom> _tblRoom;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoomIDChanging(int value);
    partial void OnRoomIDChanged();
    partial void OnMonthChanging(string value);
    partial void OnMonthChanged();
    partial void OnOldNumberChanging(int value);
    partial void OnOldNumberChanged();
    partial void OnNewNumberChanging(int value);
    partial void OnNewNumberChanged();
    #endregion
		
		public tblWater()
		{
			this._tblRoom = default(EntityRef<tblRoom>);
			OnCreated();
		}
		
		[Column(Storage="_RoomID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int RoomID
		{
			get
			{
				return this._RoomID;
			}
			set
			{
				if ((this._RoomID != value))
				{
					if (this._tblRoom.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoomIDChanging(value);
					this.SendPropertyChanging();
					this._RoomID = value;
					this.SendPropertyChanged("RoomID");
					this.OnRoomIDChanged();
				}
			}
		}
		
		[Column(Storage="_Month", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Month
		{
			get
			{
				return this._Month;
			}
			set
			{
				if ((this._Month != value))
				{
					this.OnMonthChanging(value);
					this.SendPropertyChanging();
					this._Month = value;
					this.SendPropertyChanged("Month");
					this.OnMonthChanged();
				}
			}
		}
		
		[Column(Storage="_OldNumber", DbType="Int NOT NULL")]
		public int OldNumber
		{
			get
			{
				return this._OldNumber;
			}
			set
			{
				if ((this._OldNumber != value))
				{
					this.OnOldNumberChanging(value);
					this.SendPropertyChanging();
					this._OldNumber = value;
					this.SendPropertyChanged("OldNumber");
					this.OnOldNumberChanged();
				}
			}
		}
		
		[Column(Storage="_NewNumber", DbType="Int NOT NULL")]
		public int NewNumber
		{
			get
			{
				return this._NewNumber;
			}
			set
			{
				if ((this._NewNumber != value))
				{
					this.OnNewNumberChanging(value);
					this.SendPropertyChanging();
					this._NewNumber = value;
					this.SendPropertyChanged("NewNumber");
					this.OnNewNumberChanged();
				}
			}
		}
		
		[Association(Name="tblRoom_tblWater", Storage="_tblRoom", ThisKey="RoomID", OtherKey="RoomID", IsForeignKey=true)]
		public tblRoom tblRoom
		{
			get
			{
				return this._tblRoom.Entity;
			}
			set
			{
				tblRoom previousValue = this._tblRoom.Entity;
				if (((previousValue != value) 
							|| (this._tblRoom.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblRoom.Entity = null;
						previousValue.tblWaters.Remove(this);
					}
					this._tblRoom.Entity = value;
					if ((value != null))
					{
						value.tblWaters.Add(this);
						this._RoomID = value.RoomID;
					}
					else
					{
						this._RoomID = default(int);
					}
					this.SendPropertyChanged("tblRoom");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.tblFee")]
	public partial class tblFee : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _FeeName;
		
		private decimal _FeeCost;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFeeNameChanging(string value);
    partial void OnFeeNameChanged();
    partial void OnFeeCostChanging(decimal value);
    partial void OnFeeCostChanged();
    #endregion
		
		public tblFee()
		{
			OnCreated();
		}
		
		[Column(Storage="_FeeName", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string FeeName
		{
			get
			{
				return this._FeeName;
			}
			set
			{
				if ((this._FeeName != value))
				{
					this.OnFeeNameChanging(value);
					this.SendPropertyChanging();
					this._FeeName = value;
					this.SendPropertyChanged("FeeName");
					this.OnFeeNameChanged();
				}
			}
		}
		
		[Column(Storage="_FeeCost", DbType="Decimal(9,0) NOT NULL")]
		public decimal FeeCost
		{
			get
			{
				return this._FeeCost;
			}
			set
			{
				if ((this._FeeCost != value))
				{
					this.OnFeeCostChanging(value);
					this.SendPropertyChanging();
					this._FeeCost = value;
					this.SendPropertyChanged("FeeCost");
					this.OnFeeCostChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.tblGuest")]
	public partial class tblGuest : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _CustomerName;
		
		private string _Address;
		
		private string _Birthday;
		
		private bool _Sex;
		
		private int _RoomID;
		
		private string _Telephone;
		
		private string _MobilePhone;
		
		private string _Photo;
		
		private string _Note;
		
		private EntityRef<tblRoom> _tblRoom;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCustomerNameChanging(string value);
    partial void OnCustomerNameChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnBirthdayChanging(string value);
    partial void OnBirthdayChanged();
    partial void OnSexChanging(bool value);
    partial void OnSexChanged();
    partial void OnRoomIDChanging(int value);
    partial void OnRoomIDChanged();
    partial void OnTelephoneChanging(string value);
    partial void OnTelephoneChanged();
    partial void OnMobilePhoneChanging(string value);
    partial void OnMobilePhoneChanged();
    partial void OnPhotoChanging(string value);
    partial void OnPhotoChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    #endregion
		
		public tblGuest()
		{
			this._tblRoom = default(EntityRef<tblRoom>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_CustomerName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string CustomerName
		{
			get
			{
				return this._CustomerName;
			}
			set
			{
				if ((this._CustomerName != value))
				{
					this.OnCustomerNameChanging(value);
					this.SendPropertyChanging();
					this._CustomerName = value;
					this.SendPropertyChanged("CustomerName");
					this.OnCustomerNameChanged();
				}
			}
		}
		
		[Column(Storage="_Address", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[Column(Storage="_Birthday", DbType="VarChar(20)")]
		public string Birthday
		{
			get
			{
				return this._Birthday;
			}
			set
			{
				if ((this._Birthday != value))
				{
					this.OnBirthdayChanging(value);
					this.SendPropertyChanging();
					this._Birthday = value;
					this.SendPropertyChanged("Birthday");
					this.OnBirthdayChanged();
				}
			}
		}
		
		[Column(Storage="_Sex", DbType="Bit NOT NULL")]
		public bool Sex
		{
			get
			{
				return this._Sex;
			}
			set
			{
				if ((this._Sex != value))
				{
					this.OnSexChanging(value);
					this.SendPropertyChanging();
					this._Sex = value;
					this.SendPropertyChanged("Sex");
					this.OnSexChanged();
				}
			}
		}
		
		[Column(Storage="_RoomID", DbType="Int NOT NULL")]
		public int RoomID
		{
			get
			{
				return this._RoomID;
			}
			set
			{
				if ((this._RoomID != value))
				{
					if (this._tblRoom.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoomIDChanging(value);
					this.SendPropertyChanging();
					this._RoomID = value;
					this.SendPropertyChanged("RoomID");
					this.OnRoomIDChanged();
				}
			}
		}
		
		[Column(Storage="_Telephone", DbType="NVarChar(20)")]
		public string Telephone
		{
			get
			{
				return this._Telephone;
			}
			set
			{
				if ((this._Telephone != value))
				{
					this.OnTelephoneChanging(value);
					this.SendPropertyChanging();
					this._Telephone = value;
					this.SendPropertyChanged("Telephone");
					this.OnTelephoneChanged();
				}
			}
		}
		
		[Column(Storage="_MobilePhone", DbType="NVarChar(20)")]
		public string MobilePhone
		{
			get
			{
				return this._MobilePhone;
			}
			set
			{
				if ((this._MobilePhone != value))
				{
					this.OnMobilePhoneChanging(value);
					this.SendPropertyChanging();
					this._MobilePhone = value;
					this.SendPropertyChanged("MobilePhone");
					this.OnMobilePhoneChanged();
				}
			}
		}
		
		[Column(Storage="_Photo", DbType="NVarChar(200)")]
		public string Photo
		{
			get
			{
				return this._Photo;
			}
			set
			{
				if ((this._Photo != value))
				{
					this.OnPhotoChanging(value);
					this.SendPropertyChanging();
					this._Photo = value;
					this.SendPropertyChanged("Photo");
					this.OnPhotoChanged();
				}
			}
		}
		
		[Column(Storage="_Note", DbType="NVarChar(100)")]
		public string Note
		{
			get
			{
				return this._Note;
			}
			set
			{
				if ((this._Note != value))
				{
					this.OnNoteChanging(value);
					this.SendPropertyChanging();
					this._Note = value;
					this.SendPropertyChanged("Note");
					this.OnNoteChanged();
				}
			}
		}
		
		[Association(Name="tblRoom_tblGuest", Storage="_tblRoom", ThisKey="RoomID", OtherKey="RoomID", IsForeignKey=true)]
		public tblRoom tblRoom
		{
			get
			{
				return this._tblRoom.Entity;
			}
			set
			{
				tblRoom previousValue = this._tblRoom.Entity;
				if (((previousValue != value) 
							|| (this._tblRoom.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblRoom.Entity = null;
						previousValue.tblGuests.Remove(this);
					}
					this._tblRoom.Entity = value;
					if ((value != null))
					{
						value.tblGuests.Add(this);
						this._RoomID = value.RoomID;
					}
					else
					{
						this._RoomID = default(int);
					}
					this.SendPropertyChanged("tblRoom");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.tblPrivilege")]
	public partial class tblPrivilege : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private EntitySet<tblUser> _tblUsers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public tblPrivilege()
		{
			this._tblUsers = new EntitySet<tblUser>(new Action<tblUser>(this.attach_tblUsers), new Action<tblUser>(this.detach_tblUsers));
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="tblPrivilege_tblUser", Storage="_tblUsers", ThisKey="ID", OtherKey="UserPrivilege")]
		public EntitySet<tblUser> tblUsers
		{
			get
			{
				return this._tblUsers;
			}
			set
			{
				this._tblUsers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tblUsers(tblUser entity)
		{
			this.SendPropertyChanging();
			entity.tblPrivilege = this;
		}
		
		private void detach_tblUsers(tblUser entity)
		{
			this.SendPropertyChanging();
			entity.tblPrivilege = null;
		}
	}
	
	[Table(Name="dbo.tblReceipt")]
	public partial class tblReceipt : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ReceiptID;
		
		private int _RoomID;
		
		private decimal _RoomFee;
		
		private decimal _WaterFee;
		
		private decimal _ElectricFee;
		
		private System.Nullable<decimal> _OtherFee;
		
		private string _Note;
		
		private System.Nullable<decimal> _Debt;
		
		private string _Date;
		
		private int _StatusID;
		
		private EntityRef<tblReceiptStatus> _tblReceiptStatus;
		
		private EntityRef<tblRoom> _tblRoom;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnReceiptIDChanging(int value);
    partial void OnReceiptIDChanged();
    partial void OnRoomIDChanging(int value);
    partial void OnRoomIDChanged();
    partial void OnRoomFeeChanging(decimal value);
    partial void OnRoomFeeChanged();
    partial void OnWaterFeeChanging(decimal value);
    partial void OnWaterFeeChanged();
    partial void OnElectricFeeChanging(decimal value);
    partial void OnElectricFeeChanged();
    partial void OnOtherFeeChanging(System.Nullable<decimal> value);
    partial void OnOtherFeeChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    partial void OnDebtChanging(System.Nullable<decimal> value);
    partial void OnDebtChanged();
    partial void OnDateChanging(string value);
    partial void OnDateChanged();
    partial void OnStatusIDChanging(int value);
    partial void OnStatusIDChanged();
    #endregion
		
		public tblReceipt()
		{
			this._tblReceiptStatus = default(EntityRef<tblReceiptStatus>);
			this._tblRoom = default(EntityRef<tblRoom>);
			OnCreated();
		}
		
		[Column(Storage="_ReceiptID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ReceiptID
		{
			get
			{
				return this._ReceiptID;
			}
			set
			{
				if ((this._ReceiptID != value))
				{
					this.OnReceiptIDChanging(value);
					this.SendPropertyChanging();
					this._ReceiptID = value;
					this.SendPropertyChanged("ReceiptID");
					this.OnReceiptIDChanged();
				}
			}
		}
		
		[Column(Storage="_RoomID", DbType="Int NOT NULL")]
		public int RoomID
		{
			get
			{
				return this._RoomID;
			}
			set
			{
				if ((this._RoomID != value))
				{
					if (this._tblRoom.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoomIDChanging(value);
					this.SendPropertyChanging();
					this._RoomID = value;
					this.SendPropertyChanged("RoomID");
					this.OnRoomIDChanged();
				}
			}
		}
		
		[Column(Storage="_RoomFee", DbType="Decimal(9,0) NOT NULL")]
		public decimal RoomFee
		{
			get
			{
				return this._RoomFee;
			}
			set
			{
				if ((this._RoomFee != value))
				{
					this.OnRoomFeeChanging(value);
					this.SendPropertyChanging();
					this._RoomFee = value;
					this.SendPropertyChanged("RoomFee");
					this.OnRoomFeeChanged();
				}
			}
		}
		
		[Column(Storage="_WaterFee", DbType="Decimal(9,0) NOT NULL")]
		public decimal WaterFee
		{
			get
			{
				return this._WaterFee;
			}
			set
			{
				if ((this._WaterFee != value))
				{
					this.OnWaterFeeChanging(value);
					this.SendPropertyChanging();
					this._WaterFee = value;
					this.SendPropertyChanged("WaterFee");
					this.OnWaterFeeChanged();
				}
			}
		}
		
		[Column(Storage="_ElectricFee", DbType="Decimal(9,0) NOT NULL")]
		public decimal ElectricFee
		{
			get
			{
				return this._ElectricFee;
			}
			set
			{
				if ((this._ElectricFee != value))
				{
					this.OnElectricFeeChanging(value);
					this.SendPropertyChanging();
					this._ElectricFee = value;
					this.SendPropertyChanged("ElectricFee");
					this.OnElectricFeeChanged();
				}
			}
		}
		
		[Column(Storage="_OtherFee", DbType="Decimal(9,0)")]
		public System.Nullable<decimal> OtherFee
		{
			get
			{
				return this._OtherFee;
			}
			set
			{
				if ((this._OtherFee != value))
				{
					this.OnOtherFeeChanging(value);
					this.SendPropertyChanging();
					this._OtherFee = value;
					this.SendPropertyChanged("OtherFee");
					this.OnOtherFeeChanged();
				}
			}
		}
		
		[Column(Storage="_Note", DbType="NVarChar(50)")]
		public string Note
		{
			get
			{
				return this._Note;
			}
			set
			{
				if ((this._Note != value))
				{
					this.OnNoteChanging(value);
					this.SendPropertyChanging();
					this._Note = value;
					this.SendPropertyChanged("Note");
					this.OnNoteChanged();
				}
			}
		}
		
		[Column(Storage="_Debt", DbType="Decimal(9,0)")]
		public System.Nullable<decimal> Debt
		{
			get
			{
				return this._Debt;
			}
			set
			{
				if ((this._Debt != value))
				{
					this.OnDebtChanging(value);
					this.SendPropertyChanging();
					this._Debt = value;
					this.SendPropertyChanged("Debt");
					this.OnDebtChanged();
				}
			}
		}
		
		[Column(Storage="_Date", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[Column(Storage="_StatusID", DbType="Int NOT NULL")]
		public int StatusID
		{
			get
			{
				return this._StatusID;
			}
			set
			{
				if ((this._StatusID != value))
				{
					if (this._tblReceiptStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStatusIDChanging(value);
					this.SendPropertyChanging();
					this._StatusID = value;
					this.SendPropertyChanged("StatusID");
					this.OnStatusIDChanged();
				}
			}
		}
		
		[Association(Name="tblReceiptStatus_tblReceipt", Storage="_tblReceiptStatus", ThisKey="StatusID", OtherKey="StatusID", IsForeignKey=true)]
		public tblReceiptStatus tblReceiptStatus
		{
			get
			{
				return this._tblReceiptStatus.Entity;
			}
			set
			{
				tblReceiptStatus previousValue = this._tblReceiptStatus.Entity;
				if (((previousValue != value) 
							|| (this._tblReceiptStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblReceiptStatus.Entity = null;
						previousValue.tblReceipts.Remove(this);
					}
					this._tblReceiptStatus.Entity = value;
					if ((value != null))
					{
						value.tblReceipts.Add(this);
						this._StatusID = value.StatusID;
					}
					else
					{
						this._StatusID = default(int);
					}
					this.SendPropertyChanged("tblReceiptStatus");
				}
			}
		}
		
		[Association(Name="tblRoom_tblReceipt", Storage="_tblRoom", ThisKey="RoomID", OtherKey="RoomID", IsForeignKey=true)]
		public tblRoom tblRoom
		{
			get
			{
				return this._tblRoom.Entity;
			}
			set
			{
				tblRoom previousValue = this._tblRoom.Entity;
				if (((previousValue != value) 
							|| (this._tblRoom.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblRoom.Entity = null;
						previousValue.tblReceipts.Remove(this);
					}
					this._tblRoom.Entity = value;
					if ((value != null))
					{
						value.tblReceipts.Add(this);
						this._RoomID = value.RoomID;
					}
					else
					{
						this._RoomID = default(int);
					}
					this.SendPropertyChanged("tblRoom");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.tblReceiptStatus")]
	public partial class tblReceiptStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StatusID;
		
		private string _StatusName;
		
		private EntitySet<tblReceipt> _tblReceipts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStatusIDChanging(int value);
    partial void OnStatusIDChanged();
    partial void OnStatusNameChanging(string value);
    partial void OnStatusNameChanged();
    #endregion
		
		public tblReceiptStatus()
		{
			this._tblReceipts = new EntitySet<tblReceipt>(new Action<tblReceipt>(this.attach_tblReceipts), new Action<tblReceipt>(this.detach_tblReceipts));
			OnCreated();
		}
		
		[Column(Storage="_StatusID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int StatusID
		{
			get
			{
				return this._StatusID;
			}
			set
			{
				if ((this._StatusID != value))
				{
					this.OnStatusIDChanging(value);
					this.SendPropertyChanging();
					this._StatusID = value;
					this.SendPropertyChanged("StatusID");
					this.OnStatusIDChanged();
				}
			}
		}
		
		[Column(Storage="_StatusName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string StatusName
		{
			get
			{
				return this._StatusName;
			}
			set
			{
				if ((this._StatusName != value))
				{
					this.OnStatusNameChanging(value);
					this.SendPropertyChanging();
					this._StatusName = value;
					this.SendPropertyChanged("StatusName");
					this.OnStatusNameChanged();
				}
			}
		}
		
		[Association(Name="tblReceiptStatus_tblReceipt", Storage="_tblReceipts", ThisKey="StatusID", OtherKey="StatusID")]
		public EntitySet<tblReceipt> tblReceipts
		{
			get
			{
				return this._tblReceipts;
			}
			set
			{
				this._tblReceipts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tblReceipts(tblReceipt entity)
		{
			this.SendPropertyChanging();
			entity.tblReceiptStatus = this;
		}
		
		private void detach_tblReceipts(tblReceipt entity)
		{
			this.SendPropertyChanging();
			entity.tblReceiptStatus = null;
		}
	}
	
	[Table(Name="dbo.tblRooms")]
	public partial class tblRoom : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RoomID;
		
		private string _Name;
		
		private int _TypeID;
		
		private int _Status;
		
		private int _Capacity;
		
		private string _ComingDate;
		
		private int _ElectricNo;
		
		private int _WaterNo;
		
		private EntitySet<tblElectricity> _tblElectricities;
		
		private EntitySet<tblWater> _tblWaters;
		
		private EntitySet<tblGuest> _tblGuests;
		
		private EntitySet<tblReceipt> _tblReceipts;
		
		private EntityRef<tblRoomType> _tblRoomType;
		
		private EntityRef<tblStatus> _tblStatus;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoomIDChanging(int value);
    partial void OnRoomIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnTypeIDChanging(int value);
    partial void OnTypeIDChanged();
    partial void OnStatusChanging(int value);
    partial void OnStatusChanged();
    partial void OnCapacityChanging(int value);
    partial void OnCapacityChanged();
    partial void OnComingDateChanging(string value);
    partial void OnComingDateChanged();
    partial void OnElectricNoChanging(int value);
    partial void OnElectricNoChanged();
    partial void OnWaterNoChanging(int value);
    partial void OnWaterNoChanged();
    #endregion
		
		public tblRoom()
		{
			this._tblElectricities = new EntitySet<tblElectricity>(new Action<tblElectricity>(this.attach_tblElectricities), new Action<tblElectricity>(this.detach_tblElectricities));
			this._tblWaters = new EntitySet<tblWater>(new Action<tblWater>(this.attach_tblWaters), new Action<tblWater>(this.detach_tblWaters));
			this._tblGuests = new EntitySet<tblGuest>(new Action<tblGuest>(this.attach_tblGuests), new Action<tblGuest>(this.detach_tblGuests));
			this._tblReceipts = new EntitySet<tblReceipt>(new Action<tblReceipt>(this.attach_tblReceipts), new Action<tblReceipt>(this.detach_tblReceipts));
			this._tblRoomType = default(EntityRef<tblRoomType>);
			this._tblStatus = default(EntityRef<tblStatus>);
			OnCreated();
		}
		
		[Column(Storage="_RoomID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RoomID
		{
			get
			{
				return this._RoomID;
			}
			set
			{
				if ((this._RoomID != value))
				{
					this.OnRoomIDChanging(value);
					this.SendPropertyChanging();
					this._RoomID = value;
					this.SendPropertyChanged("RoomID");
					this.OnRoomIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_TypeID", DbType="Int NOT NULL")]
		public int TypeID
		{
			get
			{
				return this._TypeID;
			}
			set
			{
				if ((this._TypeID != value))
				{
					if (this._tblRoomType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTypeIDChanging(value);
					this.SendPropertyChanging();
					this._TypeID = value;
					this.SendPropertyChanged("TypeID");
					this.OnTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_Status", DbType="Int NOT NULL")]
		public int Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					if (this._tblStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[Column(Storage="_Capacity", DbType="Int NOT NULL")]
		public int Capacity
		{
			get
			{
				return this._Capacity;
			}
			set
			{
				if ((this._Capacity != value))
				{
					this.OnCapacityChanging(value);
					this.SendPropertyChanging();
					this._Capacity = value;
					this.SendPropertyChanged("Capacity");
					this.OnCapacityChanged();
				}
			}
		}
		
		[Column(Storage="_ComingDate", DbType="VarChar(20)")]
		public string ComingDate
		{
			get
			{
				return this._ComingDate;
			}
			set
			{
				if ((this._ComingDate != value))
				{
					this.OnComingDateChanging(value);
					this.SendPropertyChanging();
					this._ComingDate = value;
					this.SendPropertyChanged("ComingDate");
					this.OnComingDateChanged();
				}
			}
		}
		
		[Column(Storage="_ElectricNo", DbType="Int NOT NULL")]
		public int ElectricNo
		{
			get
			{
				return this._ElectricNo;
			}
			set
			{
				if ((this._ElectricNo != value))
				{
					this.OnElectricNoChanging(value);
					this.SendPropertyChanging();
					this._ElectricNo = value;
					this.SendPropertyChanged("ElectricNo");
					this.OnElectricNoChanged();
				}
			}
		}
		
		[Column(Storage="_WaterNo", DbType="Int NOT NULL")]
		public int WaterNo
		{
			get
			{
				return this._WaterNo;
			}
			set
			{
				if ((this._WaterNo != value))
				{
					this.OnWaterNoChanging(value);
					this.SendPropertyChanging();
					this._WaterNo = value;
					this.SendPropertyChanged("WaterNo");
					this.OnWaterNoChanged();
				}
			}
		}
		
		[Association(Name="tblRoom_tblElectricity", Storage="_tblElectricities", ThisKey="RoomID", OtherKey="RoomID")]
		public EntitySet<tblElectricity> tblElectricities
		{
			get
			{
				return this._tblElectricities;
			}
			set
			{
				this._tblElectricities.Assign(value);
			}
		}
		
		[Association(Name="tblRoom_tblWater", Storage="_tblWaters", ThisKey="RoomID", OtherKey="RoomID")]
		public EntitySet<tblWater> tblWaters
		{
			get
			{
				return this._tblWaters;
			}
			set
			{
				this._tblWaters.Assign(value);
			}
		}
		
		[Association(Name="tblRoom_tblGuest", Storage="_tblGuests", ThisKey="RoomID", OtherKey="RoomID")]
		public EntitySet<tblGuest> tblGuests
		{
			get
			{
				return this._tblGuests;
			}
			set
			{
				this._tblGuests.Assign(value);
			}
		}
		
		[Association(Name="tblRoom_tblReceipt", Storage="_tblReceipts", ThisKey="RoomID", OtherKey="RoomID")]
		public EntitySet<tblReceipt> tblReceipts
		{
			get
			{
				return this._tblReceipts;
			}
			set
			{
				this._tblReceipts.Assign(value);
			}
		}
		
		[Association(Name="tblRoomType_tblRoom", Storage="_tblRoomType", ThisKey="TypeID", OtherKey="TypeID", IsForeignKey=true)]
		public tblRoomType tblRoomType
		{
			get
			{
				return this._tblRoomType.Entity;
			}
			set
			{
				tblRoomType previousValue = this._tblRoomType.Entity;
				if (((previousValue != value) 
							|| (this._tblRoomType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblRoomType.Entity = null;
						previousValue.tblRooms.Remove(this);
					}
					this._tblRoomType.Entity = value;
					if ((value != null))
					{
						value.tblRooms.Add(this);
						this._TypeID = value.TypeID;
					}
					else
					{
						this._TypeID = default(int);
					}
					this.SendPropertyChanged("tblRoomType");
				}
			}
		}
		
		[Association(Name="tblStatus_tblRoom", Storage="_tblStatus", ThisKey="Status", OtherKey="StatusID", IsForeignKey=true)]
		public tblStatus tblStatus
		{
			get
			{
				return this._tblStatus.Entity;
			}
			set
			{
				tblStatus previousValue = this._tblStatus.Entity;
				if (((previousValue != value) 
							|| (this._tblStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblStatus.Entity = null;
						previousValue.tblRooms.Remove(this);
					}
					this._tblStatus.Entity = value;
					if ((value != null))
					{
						value.tblRooms.Add(this);
						this._Status = value.StatusID;
					}
					else
					{
						this._Status = default(int);
					}
					this.SendPropertyChanged("tblStatus");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tblElectricities(tblElectricity entity)
		{
			this.SendPropertyChanging();
			entity.tblRoom = this;
		}
		
		private void detach_tblElectricities(tblElectricity entity)
		{
			this.SendPropertyChanging();
			entity.tblRoom = null;
		}
		
		private void attach_tblWaters(tblWater entity)
		{
			this.SendPropertyChanging();
			entity.tblRoom = this;
		}
		
		private void detach_tblWaters(tblWater entity)
		{
			this.SendPropertyChanging();
			entity.tblRoom = null;
		}
		
		private void attach_tblGuests(tblGuest entity)
		{
			this.SendPropertyChanging();
			entity.tblRoom = this;
		}
		
		private void detach_tblGuests(tblGuest entity)
		{
			this.SendPropertyChanging();
			entity.tblRoom = null;
		}
		
		private void attach_tblReceipts(tblReceipt entity)
		{
			this.SendPropertyChanging();
			entity.tblRoom = this;
		}
		
		private void detach_tblReceipts(tblReceipt entity)
		{
			this.SendPropertyChanging();
			entity.tblRoom = null;
		}
	}
	
	[Table(Name="dbo.tblRoomType")]
	public partial class tblRoomType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TypeID;
		
		private string _TypeName;
		
		private decimal _Price;
		
		private EntitySet<tblRoom> _tblRooms;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTypeIDChanging(int value);
    partial void OnTypeIDChanged();
    partial void OnTypeNameChanging(string value);
    partial void OnTypeNameChanged();
    partial void OnPriceChanging(decimal value);
    partial void OnPriceChanged();
    #endregion
		
		public tblRoomType()
		{
			this._tblRooms = new EntitySet<tblRoom>(new Action<tblRoom>(this.attach_tblRooms), new Action<tblRoom>(this.detach_tblRooms));
			OnCreated();
		}
		
		[Column(Storage="_TypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TypeID
		{
			get
			{
				return this._TypeID;
			}
			set
			{
				if ((this._TypeID != value))
				{
					this.OnTypeIDChanging(value);
					this.SendPropertyChanging();
					this._TypeID = value;
					this.SendPropertyChanged("TypeID");
					this.OnTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_TypeName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string TypeName
		{
			get
			{
				return this._TypeName;
			}
			set
			{
				if ((this._TypeName != value))
				{
					this.OnTypeNameChanging(value);
					this.SendPropertyChanging();
					this._TypeName = value;
					this.SendPropertyChanged("TypeName");
					this.OnTypeNameChanged();
				}
			}
		}
		
		[Column(Storage="_Price", DbType="Decimal(9,0) NOT NULL")]
		public decimal Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[Association(Name="tblRoomType_tblRoom", Storage="_tblRooms", ThisKey="TypeID", OtherKey="TypeID")]
		public EntitySet<tblRoom> tblRooms
		{
			get
			{
				return this._tblRooms;
			}
			set
			{
				this._tblRooms.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tblRooms(tblRoom entity)
		{
			this.SendPropertyChanging();
			entity.tblRoomType = this;
		}
		
		private void detach_tblRooms(tblRoom entity)
		{
			this.SendPropertyChanging();
			entity.tblRoomType = null;
		}
	}
	
	[Table(Name="dbo.tblStatus")]
	public partial class tblStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StatusID;
		
		private string _StatusName;
		
		private EntitySet<tblRoom> _tblRooms;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStatusIDChanging(int value);
    partial void OnStatusIDChanged();
    partial void OnStatusNameChanging(string value);
    partial void OnStatusNameChanged();
    #endregion
		
		public tblStatus()
		{
			this._tblRooms = new EntitySet<tblRoom>(new Action<tblRoom>(this.attach_tblRooms), new Action<tblRoom>(this.detach_tblRooms));
			OnCreated();
		}
		
		[Column(Storage="_StatusID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int StatusID
		{
			get
			{
				return this._StatusID;
			}
			set
			{
				if ((this._StatusID != value))
				{
					this.OnStatusIDChanging(value);
					this.SendPropertyChanging();
					this._StatusID = value;
					this.SendPropertyChanged("StatusID");
					this.OnStatusIDChanged();
				}
			}
		}
		
		[Column(Storage="_StatusName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string StatusName
		{
			get
			{
				return this._StatusName;
			}
			set
			{
				if ((this._StatusName != value))
				{
					this.OnStatusNameChanging(value);
					this.SendPropertyChanging();
					this._StatusName = value;
					this.SendPropertyChanged("StatusName");
					this.OnStatusNameChanged();
				}
			}
		}
		
		[Association(Name="tblStatus_tblRoom", Storage="_tblRooms", ThisKey="StatusID", OtherKey="Status")]
		public EntitySet<tblRoom> tblRooms
		{
			get
			{
				return this._tblRooms;
			}
			set
			{
				this._tblRooms.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tblRooms(tblRoom entity)
		{
			this.SendPropertyChanging();
			entity.tblStatus = this;
		}
		
		private void detach_tblRooms(tblRoom entity)
		{
			this.SendPropertyChanging();
			entity.tblStatus = null;
		}
	}
	
	[Table(Name="dbo.tblUser")]
	public partial class tblUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _UserName;
		
		private string _Password;
		
		private int _UserPrivilege;
		
		private EntityRef<tblPrivilege> _tblPrivilege;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnUserPrivilegeChanging(int value);
    partial void OnUserPrivilegeChanged();
    #endregion
		
		public tblUser()
		{
			this._tblPrivilege = default(EntityRef<tblPrivilege>);
			OnCreated();
		}
		
		[Column(Storage="_UserName", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[Column(Storage="_Password", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[Column(Storage="_UserPrivilege", DbType="Int NOT NULL")]
		public int UserPrivilege
		{
			get
			{
				return this._UserPrivilege;
			}
			set
			{
				if ((this._UserPrivilege != value))
				{
					if (this._tblPrivilege.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserPrivilegeChanging(value);
					this.SendPropertyChanging();
					this._UserPrivilege = value;
					this.SendPropertyChanged("UserPrivilege");
					this.OnUserPrivilegeChanged();
				}
			}
		}
		
		[Association(Name="tblPrivilege_tblUser", Storage="_tblPrivilege", ThisKey="UserPrivilege", OtherKey="ID", IsForeignKey=true)]
		public tblPrivilege tblPrivilege
		{
			get
			{
				return this._tblPrivilege.Entity;
			}
			set
			{
				tblPrivilege previousValue = this._tblPrivilege.Entity;
				if (((previousValue != value) 
							|| (this._tblPrivilege.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblPrivilege.Entity = null;
						previousValue.tblUsers.Remove(this);
					}
					this._tblPrivilege.Entity = value;
					if ((value != null))
					{
						value.tblUsers.Add(this);
						this._UserPrivilege = value.ID;
					}
					else
					{
						this._UserPrivilege = default(int);
					}
					this.SendPropertyChanged("tblPrivilege");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	public partial class spuGetElectricFeeResult
	{
		
		private string _FeeName;
		
		private decimal _FeeCost;
		
		public spuGetElectricFeeResult()
		{
		}
		
		[Column(Storage="_FeeName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string FeeName
		{
			get
			{
				return this._FeeName;
			}
			set
			{
				if ((this._FeeName != value))
				{
					this._FeeName = value;
				}
			}
		}
		
		[Column(Storage="_FeeCost", DbType="Decimal(0,0) NOT NULL")]
		public decimal FeeCost
		{
			get
			{
				return this._FeeCost;
			}
			set
			{
				if ((this._FeeCost != value))
				{
					this._FeeCost = value;
				}
			}
		}
	}
	
	public partial class spuGetElectricNoResult
	{
		
		private int _RoomID;
		
		private string _Month;
		
		private int _OldNumber;
		
		private int _NewNumber;
		
		public spuGetElectricNoResult()
		{
		}
		
		[Column(Storage="_RoomID", DbType="Int NOT NULL")]
		public int RoomID
		{
			get
			{
				return this._RoomID;
			}
			set
			{
				if ((this._RoomID != value))
				{
					this._RoomID = value;
				}
			}
		}
		
		[Column(Storage="_Month", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string Month
		{
			get
			{
				return this._Month;
			}
			set
			{
				if ((this._Month != value))
				{
					this._Month = value;
				}
			}
		}
		
		[Column(Storage="_OldNumber", DbType="Int NOT NULL")]
		public int OldNumber
		{
			get
			{
				return this._OldNumber;
			}
			set
			{
				if ((this._OldNumber != value))
				{
					this._OldNumber = value;
				}
			}
		}
		
		[Column(Storage="_NewNumber", DbType="Int NOT NULL")]
		public int NewNumber
		{
			get
			{
				return this._NewNumber;
			}
			set
			{
				if ((this._NewNumber != value))
				{
					this._NewNumber = value;
				}
			}
		}
	}
	
	public partial class spuGetGuestByIDResult
	{
		
		private int _ID;
		
		private string _CustomerName;
		
		private string _Address;
		
		private string _Birthday;
		
		private bool _Sex;
		
		private int _RoomID;
		
		private string _Telephone;
		
		private string _MobilePhone;
		
		private string _Photo;
		
		private string _Note;
		
		private int _RoomID1;
		
		private string _Name;
		
		private int _TypeID;
		
		private int _Status;
		
		private int _Capacity;
		
		private string _ComingDate;
		
		private int _ElectricNo;
		
		private int _WaterNo;
		
		public spuGetGuestByIDResult()
		{
		}
		
		[Column(Storage="_ID", DbType="Int NOT NULL")]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this._ID = value;
				}
			}
		}
		
		[Column(Storage="_CustomerName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string CustomerName
		{
			get
			{
				return this._CustomerName;
			}
			set
			{
				if ((this._CustomerName != value))
				{
					this._CustomerName = value;
				}
			}
		}
		
		[Column(Storage="_Address", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this._Address = value;
				}
			}
		}
		
		[Column(Storage="_Birthday", DbType="VarChar(20)")]
		public string Birthday
		{
			get
			{
				return this._Birthday;
			}
			set
			{
				if ((this._Birthday != value))
				{
					this._Birthday = value;
				}
			}
		}
		
		[Column(Storage="_Sex", DbType="Bit NOT NULL")]
		public bool Sex
		{
			get
			{
				return this._Sex;
			}
			set
			{
				if ((this._Sex != value))
				{
					this._Sex = value;
				}
			}
		}
		
		[Column(Storage="_RoomID", DbType="Int NOT NULL")]
		public int RoomID
		{
			get
			{
				return this._RoomID;
			}
			set
			{
				if ((this._RoomID != value))
				{
					this._RoomID = value;
				}
			}
		}
		
		[Column(Storage="_Telephone", DbType="NVarChar(20)")]
		public string Telephone
		{
			get
			{
				return this._Telephone;
			}
			set
			{
				if ((this._Telephone != value))
				{
					this._Telephone = value;
				}
			}
		}
		
		[Column(Storage="_MobilePhone", DbType="NVarChar(20)")]
		public string MobilePhone
		{
			get
			{
				return this._MobilePhone;
			}
			set
			{
				if ((this._MobilePhone != value))
				{
					this._MobilePhone = value;
				}
			}
		}
		
		[Column(Storage="_Photo", DbType="NVarChar(200)")]
		public string Photo
		{
			get
			{
				return this._Photo;
			}
			set
			{
				if ((this._Photo != value))
				{
					this._Photo = value;
				}
			}
		}
		
		[Column(Storage="_Note", DbType="NVarChar(100)")]
		public string Note
		{
			get
			{
				return this._Note;
			}
			set
			{
				if ((this._Note != value))
				{
					this._Note = value;
				}
			}
		}
		
		[Column(Storage="_RoomID1", DbType="Int NOT NULL")]
		public int RoomID1
		{
			get
			{
				return this._RoomID1;
			}
			set
			{
				if ((this._RoomID1 != value))
				{
					this._RoomID1 = value;
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
		
		[Column(Storage="_TypeID", DbType="Int NOT NULL")]
		public int TypeID
		{
			get
			{
				return this._TypeID;
			}
			set
			{
				if ((this._TypeID != value))
				{
					this._TypeID = value;
				}
			}
		}
		
		[Column(Storage="_Status", DbType="Int NOT NULL")]
		public int Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this._Status = value;
				}
			}
		}
		
		[Column(Storage="_Capacity", DbType="Int NOT NULL")]
		public int Capacity
		{
			get
			{
				return this._Capacity;
			}
			set
			{
				if ((this._Capacity != value))
				{
					this._Capacity = value;
				}
			}
		}
		
		[Column(Storage="_ComingDate", DbType="VarChar(20)")]
		public string ComingDate
		{
			get
			{
				return this._ComingDate;
			}
			set
			{
				if ((this._ComingDate != value))
				{
					this._ComingDate = value;
				}
			}
		}
		
		[Column(Storage="_ElectricNo", DbType="Int NOT NULL")]
		public int ElectricNo
		{
			get
			{
				return this._ElectricNo;
			}
			set
			{
				if ((this._ElectricNo != value))
				{
					this._ElectricNo = value;
				}
			}
		}
		
		[Column(Storage="_WaterNo", DbType="Int NOT NULL")]
		public int WaterNo
		{
			get
			{
				return this._WaterNo;
			}
			set
			{
				if ((this._WaterNo != value))
				{
					this._WaterNo = value;
				}
			}
		}
	}
	
	public partial class spuGetGuestListResult
	{
		
		private int _ID;
		
		private string _CustomerName;
		
		private string _Address;
		
		private string _Birthday;
		
		private bool _Sex;
		
		private int _RoomID;
		
		private string _Telephone;
		
		private string _MobilePhone;
		
		private string _Photo;
		
		private string _Note;
		
		private int _RoomID1;
		
		private string _Name;
		
		private int _TypeID;
		
		private int _Status;
		
		private int _Capacity;
		
		private string _ComingDate;
		
		private int _ElectricNo;
		
		private int _WaterNo;
		
		public spuGetGuestListResult()
		{
		}
		
		[Column(Storage="_ID", DbType="Int NOT NULL")]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this._ID = value;
				}
			}
		}
		
		[Column(Storage="_CustomerName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string CustomerName
		{
			get
			{
				return this._CustomerName;
			}
			set
			{
				if ((this._CustomerName != value))
				{
					this._CustomerName = value;
				}
			}
		}
		
		[Column(Storage="_Address", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this._Address = value;
				}
			}
		}
		
		[Column(Storage="_Birthday", DbType="VarChar(20)")]
		public string Birthday
		{
			get
			{
				return this._Birthday;
			}
			set
			{
				if ((this._Birthday != value))
				{
					this._Birthday = value;
				}
			}
		}
		
		[Column(Storage="_Sex", DbType="Bit NOT NULL")]
		public bool Sex
		{
			get
			{
				return this._Sex;
			}
			set
			{
				if ((this._Sex != value))
				{
					this._Sex = value;
				}
			}
		}
		
		[Column(Storage="_RoomID", DbType="Int NOT NULL")]
		public int RoomID
		{
			get
			{
				return this._RoomID;
			}
			set
			{
				if ((this._RoomID != value))
				{
					this._RoomID = value;
				}
			}
		}
		
		[Column(Storage="_Telephone", DbType="NVarChar(20)")]
		public string Telephone
		{
			get
			{
				return this._Telephone;
			}
			set
			{
				if ((this._Telephone != value))
				{
					this._Telephone = value;
				}
			}
		}
		
		[Column(Storage="_MobilePhone", DbType="NVarChar(20)")]
		public string MobilePhone
		{
			get
			{
				return this._MobilePhone;
			}
			set
			{
				if ((this._MobilePhone != value))
				{
					this._MobilePhone = value;
				}
			}
		}
		
		[Column(Storage="_Photo", DbType="NVarChar(200)")]
		public string Photo
		{
			get
			{
				return this._Photo;
			}
			set
			{
				if ((this._Photo != value))
				{
					this._Photo = value;
				}
			}
		}
		
		[Column(Storage="_Note", DbType="NVarChar(100)")]
		public string Note
		{
			get
			{
				return this._Note;
			}
			set
			{
				if ((this._Note != value))
				{
					this._Note = value;
				}
			}
		}
		
		[Column(Storage="_RoomID1", DbType="Int NOT NULL")]
		public int RoomID1
		{
			get
			{
				return this._RoomID1;
			}
			set
			{
				if ((this._RoomID1 != value))
				{
					this._RoomID1 = value;
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
		
		[Column(Storage="_TypeID", DbType="Int NOT NULL")]
		public int TypeID
		{
			get
			{
				return this._TypeID;
			}
			set
			{
				if ((this._TypeID != value))
				{
					this._TypeID = value;
				}
			}
		}
		
		[Column(Storage="_Status", DbType="Int NOT NULL")]
		public int Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this._Status = value;
				}
			}
		}
		
		[Column(Storage="_Capacity", DbType="Int NOT NULL")]
		public int Capacity
		{
			get
			{
				return this._Capacity;
			}
			set
			{
				if ((this._Capacity != value))
				{
					this._Capacity = value;
				}
			}
		}
		
		[Column(Storage="_ComingDate", DbType="VarChar(20)")]
		public string ComingDate
		{
			get
			{
				return this._ComingDate;
			}
			set
			{
				if ((this._ComingDate != value))
				{
					this._ComingDate = value;
				}
			}
		}
		
		[Column(Storage="_ElectricNo", DbType="Int NOT NULL")]
		public int ElectricNo
		{
			get
			{
				return this._ElectricNo;
			}
			set
			{
				if ((this._ElectricNo != value))
				{
					this._ElectricNo = value;
				}
			}
		}
		
		[Column(Storage="_WaterNo", DbType="Int NOT NULL")]
		public int WaterNo
		{
			get
			{
				return this._WaterNo;
			}
			set
			{
				if ((this._WaterNo != value))
				{
					this._WaterNo = value;
				}
			}
		}
	}
	
	public partial class spuGetReceiptByIDResult
	{
		
		private int _ReceiptID;
		
		private int _RoomID;
		
		private decimal _RoomFee;
		
		private decimal _WaterFee;
		
		private decimal _ElectricFee;
		
		private System.Nullable<decimal> _OtherFee;
		
		private string _Note;
		
		private System.Nullable<decimal> _Debt;
		
		private string _Date;
		
		private int _StatusID;
		
		private int _StatusID1;
		
		private string _StatusName;
		
		private int _RoomID1;
		
		private string _Name;
		
		private int _TypeID;
		
		private int _Status;
		
		private int _Capacity;
		
		private string _ComingDate;
		
		private int _ElectricNo;
		
		private int _WaterNo;
		
		public spuGetReceiptByIDResult()
		{
		}
		
		[Column(Storage="_ReceiptID", DbType="Int NOT NULL")]
		public int ReceiptID
		{
			get
			{
				return this._ReceiptID;
			}
			set
			{
				if ((this._ReceiptID != value))
				{
					this._ReceiptID = value;
				}
			}
		}
		
		[Column(Storage="_RoomID", DbType="Int NOT NULL")]
		public int RoomID
		{
			get
			{
				return this._RoomID;
			}
			set
			{
				if ((this._RoomID != value))
				{
					this._RoomID = value;
				}
			}
		}
		
		[Column(Storage="_RoomFee", DbType="Decimal(0,0) NOT NULL")]
		public decimal RoomFee
		{
			get
			{
				return this._RoomFee;
			}
			set
			{
				if ((this._RoomFee != value))
				{
					this._RoomFee = value;
				}
			}
		}
		
		[Column(Storage="_WaterFee", DbType="Decimal(0,0) NOT NULL")]
		public decimal WaterFee
		{
			get
			{
				return this._WaterFee;
			}
			set
			{
				if ((this._WaterFee != value))
				{
					this._WaterFee = value;
				}
			}
		}
		
		[Column(Storage="_ElectricFee", DbType="Decimal(0,0) NOT NULL")]
		public decimal ElectricFee
		{
			get
			{
				return this._ElectricFee;
			}
			set
			{
				if ((this._ElectricFee != value))
				{
					this._ElectricFee = value;
				}
			}
		}
		
		[Column(Storage="_OtherFee", DbType="Decimal(0,0)")]
		public System.Nullable<decimal> OtherFee
		{
			get
			{
				return this._OtherFee;
			}
			set
			{
				if ((this._OtherFee != value))
				{
					this._OtherFee = value;
				}
			}
		}
		
		[Column(Storage="_Note", DbType="NVarChar(50)")]
		public string Note
		{
			get
			{
				return this._Note;
			}
			set
			{
				if ((this._Note != value))
				{
					this._Note = value;
				}
			}
		}
		
		[Column(Storage="_Debt", DbType="Decimal(0,0)")]
		public System.Nullable<decimal> Debt
		{
			get
			{
				return this._Debt;
			}
			set
			{
				if ((this._Debt != value))
				{
					this._Debt = value;
				}
			}
		}
		
		[Column(Storage="_Date", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this._Date = value;
				}
			}
		}
		
		[Column(Storage="_StatusID", DbType="Int NOT NULL")]
		public int StatusID
		{
			get
			{
				return this._StatusID;
			}
			set
			{
				if ((this._StatusID != value))
				{
					this._StatusID = value;
				}
			}
		}
		
		[Column(Storage="_StatusID1", DbType="Int NOT NULL")]
		public int StatusID1
		{
			get
			{
				return this._StatusID1;
			}
			set
			{
				if ((this._StatusID1 != value))
				{
					this._StatusID1 = value;
				}
			}
		}
		
		[Column(Storage="_StatusName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string StatusName
		{
			get
			{
				return this._StatusName;
			}
			set
			{
				if ((this._StatusName != value))
				{
					this._StatusName = value;
				}
			}
		}
		
		[Column(Storage="_RoomID1", DbType="Int NOT NULL")]
		public int RoomID1
		{
			get
			{
				return this._RoomID1;
			}
			set
			{
				if ((this._RoomID1 != value))
				{
					this._RoomID1 = value;
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
		
		[Column(Storage="_TypeID", DbType="Int NOT NULL")]
		public int TypeID
		{
			get
			{
				return this._TypeID;
			}
			set
			{
				if ((this._TypeID != value))
				{
					this._TypeID = value;
				}
			}
		}
		
		[Column(Storage="_Status", DbType="Int NOT NULL")]
		public int Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this._Status = value;
				}
			}
		}
		
		[Column(Storage="_Capacity", DbType="Int NOT NULL")]
		public int Capacity
		{
			get
			{
				return this._Capacity;
			}
			set
			{
				if ((this._Capacity != value))
				{
					this._Capacity = value;
				}
			}
		}
		
		[Column(Storage="_ComingDate", DbType="VarChar(20)")]
		public string ComingDate
		{
			get
			{
				return this._ComingDate;
			}
			set
			{
				if ((this._ComingDate != value))
				{
					this._ComingDate = value;
				}
			}
		}
		
		[Column(Storage="_ElectricNo", DbType="Int NOT NULL")]
		public int ElectricNo
		{
			get
			{
				return this._ElectricNo;
			}
			set
			{
				if ((this._ElectricNo != value))
				{
					this._ElectricNo = value;
				}
			}
		}
		
		[Column(Storage="_WaterNo", DbType="Int NOT NULL")]
		public int WaterNo
		{
			get
			{
				return this._WaterNo;
			}
			set
			{
				if ((this._WaterNo != value))
				{
					this._WaterNo = value;
				}
			}
		}
	}
	
	public partial class spuGetReceiptStatusResult
	{
		
		private int _StatusID;
		
		private string _StatusName;
		
		public spuGetReceiptStatusResult()
		{
		}
		
		[Column(Storage="_StatusID", DbType="Int NOT NULL")]
		public int StatusID
		{
			get
			{
				return this._StatusID;
			}
			set
			{
				if ((this._StatusID != value))
				{
					this._StatusID = value;
				}
			}
		}
		
		[Column(Storage="_StatusName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string StatusName
		{
			get
			{
				return this._StatusName;
			}
			set
			{
				if ((this._StatusName != value))
				{
					this._StatusName = value;
				}
			}
		}
	}
	
	public partial class spuGetRoomByIDResult
	{
		
		private int _RoomID;
		
		private string _Name;
		
		private int _TypeID;
		
		private int _Status;
		
		private int _Capacity;
		
		private string _ComingDate;
		
		private int _ElectricNo;
		
		private int _WaterNo;
		
		private int _StatusID;
		
		private string _StatusName;
		
		private int _TypeID1;
		
		private string _TypeName;
		
		private decimal _Price;
		
		public spuGetRoomByIDResult()
		{
		}
		
		[Column(Storage="_RoomID", DbType="Int NOT NULL")]
		public int RoomID
		{
			get
			{
				return this._RoomID;
			}
			set
			{
				if ((this._RoomID != value))
				{
					this._RoomID = value;
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
		
		[Column(Storage="_TypeID", DbType="Int NOT NULL")]
		public int TypeID
		{
			get
			{
				return this._TypeID;
			}
			set
			{
				if ((this._TypeID != value))
				{
					this._TypeID = value;
				}
			}
		}
		
		[Column(Storage="_Status", DbType="Int NOT NULL")]
		public int Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this._Status = value;
				}
			}
		}
		
		[Column(Storage="_Capacity", DbType="Int NOT NULL")]
		public int Capacity
		{
			get
			{
				return this._Capacity;
			}
			set
			{
				if ((this._Capacity != value))
				{
					this._Capacity = value;
				}
			}
		}
		
		[Column(Storage="_ComingDate", DbType="VarChar(20)")]
		public string ComingDate
		{
			get
			{
				return this._ComingDate;
			}
			set
			{
				if ((this._ComingDate != value))
				{
					this._ComingDate = value;
				}
			}
		}
		
		[Column(Storage="_ElectricNo", DbType="Int NOT NULL")]
		public int ElectricNo
		{
			get
			{
				return this._ElectricNo;
			}
			set
			{
				if ((this._ElectricNo != value))
				{
					this._ElectricNo = value;
				}
			}
		}
		
		[Column(Storage="_WaterNo", DbType="Int NOT NULL")]
		public int WaterNo
		{
			get
			{
				return this._WaterNo;
			}
			set
			{
				if ((this._WaterNo != value))
				{
					this._WaterNo = value;
				}
			}
		}
		
		[Column(Storage="_StatusID", DbType="Int NOT NULL")]
		public int StatusID
		{
			get
			{
				return this._StatusID;
			}
			set
			{
				if ((this._StatusID != value))
				{
					this._StatusID = value;
				}
			}
		}
		
		[Column(Storage="_StatusName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string StatusName
		{
			get
			{
				return this._StatusName;
			}
			set
			{
				if ((this._StatusName != value))
				{
					this._StatusName = value;
				}
			}
		}
		
		[Column(Storage="_TypeID1", DbType="Int NOT NULL")]
		public int TypeID1
		{
			get
			{
				return this._TypeID1;
			}
			set
			{
				if ((this._TypeID1 != value))
				{
					this._TypeID1 = value;
				}
			}
		}
		
		[Column(Storage="_TypeName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string TypeName
		{
			get
			{
				return this._TypeName;
			}
			set
			{
				if ((this._TypeName != value))
				{
					this._TypeName = value;
				}
			}
		}
		
		[Column(Storage="_Price", DbType="Decimal(0,0) NOT NULL")]
		public decimal Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this._Price = value;
				}
			}
		}
	}
	
	public partial class spuGetRoomsResult
	{
		
		private int _RoomID;
		
		private string _Name;
		
		private int _TypeID;
		
		private int _Status;
		
		private int _Capacity;
		
		private string _ComingDate;
		
		private int _ElectricNo;
		
		private int _WaterNo;
		
		private int _StatusID;
		
		private string _StatusName;
		
		private int _TypeID1;
		
		private string _TypeName;
		
		private decimal _Price;
		
		public spuGetRoomsResult()
		{
		}
		
		[Column(Storage="_RoomID", DbType="Int NOT NULL")]
		public int RoomID
		{
			get
			{
				return this._RoomID;
			}
			set
			{
				if ((this._RoomID != value))
				{
					this._RoomID = value;
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
		
		[Column(Storage="_TypeID", DbType="Int NOT NULL")]
		public int TypeID
		{
			get
			{
				return this._TypeID;
			}
			set
			{
				if ((this._TypeID != value))
				{
					this._TypeID = value;
				}
			}
		}
		
		[Column(Storage="_Status", DbType="Int NOT NULL")]
		public int Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this._Status = value;
				}
			}
		}
		
		[Column(Storage="_Capacity", DbType="Int NOT NULL")]
		public int Capacity
		{
			get
			{
				return this._Capacity;
			}
			set
			{
				if ((this._Capacity != value))
				{
					this._Capacity = value;
				}
			}
		}
		
		[Column(Storage="_ComingDate", DbType="VarChar(20)")]
		public string ComingDate
		{
			get
			{
				return this._ComingDate;
			}
			set
			{
				if ((this._ComingDate != value))
				{
					this._ComingDate = value;
				}
			}
		}
		
		[Column(Storage="_ElectricNo", DbType="Int NOT NULL")]
		public int ElectricNo
		{
			get
			{
				return this._ElectricNo;
			}
			set
			{
				if ((this._ElectricNo != value))
				{
					this._ElectricNo = value;
				}
			}
		}
		
		[Column(Storage="_WaterNo", DbType="Int NOT NULL")]
		public int WaterNo
		{
			get
			{
				return this._WaterNo;
			}
			set
			{
				if ((this._WaterNo != value))
				{
					this._WaterNo = value;
				}
			}
		}
		
		[Column(Storage="_StatusID", DbType="Int NOT NULL")]
		public int StatusID
		{
			get
			{
				return this._StatusID;
			}
			set
			{
				if ((this._StatusID != value))
				{
					this._StatusID = value;
				}
			}
		}
		
		[Column(Storage="_StatusName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string StatusName
		{
			get
			{
				return this._StatusName;
			}
			set
			{
				if ((this._StatusName != value))
				{
					this._StatusName = value;
				}
			}
		}
		
		[Column(Storage="_TypeID1", DbType="Int NOT NULL")]
		public int TypeID1
		{
			get
			{
				return this._TypeID1;
			}
			set
			{
				if ((this._TypeID1 != value))
				{
					this._TypeID1 = value;
				}
			}
		}
		
		[Column(Storage="_TypeName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string TypeName
		{
			get
			{
				return this._TypeName;
			}
			set
			{
				if ((this._TypeName != value))
				{
					this._TypeName = value;
				}
			}
		}
		
		[Column(Storage="_Price", DbType="Decimal(0,0) NOT NULL")]
		public decimal Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this._Price = value;
				}
			}
		}
	}
	
	public partial class spuGetRoomStatusResult
	{
		
		private int _StatusID;
		
		private string _StatusName;
		
		public spuGetRoomStatusResult()
		{
		}
		
		[Column(Storage="_StatusID", DbType="Int NOT NULL")]
		public int StatusID
		{
			get
			{
				return this._StatusID;
			}
			set
			{
				if ((this._StatusID != value))
				{
					this._StatusID = value;
				}
			}
		}
		
		[Column(Storage="_StatusName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string StatusName
		{
			get
			{
				return this._StatusName;
			}
			set
			{
				if ((this._StatusName != value))
				{
					this._StatusName = value;
				}
			}
		}
	}
	
	public partial class spuGetRoomStatusByIDResult
	{
		
		private int _StatusID;
		
		private string _StatusName;
		
		public spuGetRoomStatusByIDResult()
		{
		}
		
		[Column(Storage="_StatusID", DbType="Int NOT NULL")]
		public int StatusID
		{
			get
			{
				return this._StatusID;
			}
			set
			{
				if ((this._StatusID != value))
				{
					this._StatusID = value;
				}
			}
		}
		
		[Column(Storage="_StatusName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string StatusName
		{
			get
			{
				return this._StatusName;
			}
			set
			{
				if ((this._StatusName != value))
				{
					this._StatusName = value;
				}
			}
		}
	}
	
	public partial class spuGetRoomTypeResult
	{
		
		private int _TypeID;
		
		private string _TypeName;
		
		private decimal _Price;
		
		public spuGetRoomTypeResult()
		{
		}
		
		[Column(Storage="_TypeID", DbType="Int NOT NULL")]
		public int TypeID
		{
			get
			{
				return this._TypeID;
			}
			set
			{
				if ((this._TypeID != value))
				{
					this._TypeID = value;
				}
			}
		}
		
		[Column(Storage="_TypeName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string TypeName
		{
			get
			{
				return this._TypeName;
			}
			set
			{
				if ((this._TypeName != value))
				{
					this._TypeName = value;
				}
			}
		}
		
		[Column(Storage="_Price", DbType="Decimal(0,0) NOT NULL")]
		public decimal Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this._Price = value;
				}
			}
		}
	}
	
	public partial class spuGetRoomTypeByIDResult
	{
		
		private int _TypeID;
		
		private string _TypeName;
		
		private decimal _Price;
		
		public spuGetRoomTypeByIDResult()
		{
		}
		
		[Column(Storage="_TypeID", DbType="Int NOT NULL")]
		public int TypeID
		{
			get
			{
				return this._TypeID;
			}
			set
			{
				if ((this._TypeID != value))
				{
					this._TypeID = value;
				}
			}
		}
		
		[Column(Storage="_TypeName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string TypeName
		{
			get
			{
				return this._TypeName;
			}
			set
			{
				if ((this._TypeName != value))
				{
					this._TypeName = value;
				}
			}
		}
		
		[Column(Storage="_Price", DbType="Decimal(0,0) NOT NULL")]
		public decimal Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this._Price = value;
				}
			}
		}
	}
	
	public partial class spuGetStatusByIDResult
	{
		
		private int _StatusID;
		
		private string _StatusName;
		
		public spuGetStatusByIDResult()
		{
		}
		
		[Column(Storage="_StatusID", DbType="Int NOT NULL")]
		public int StatusID
		{
			get
			{
				return this._StatusID;
			}
			set
			{
				if ((this._StatusID != value))
				{
					this._StatusID = value;
				}
			}
		}
		
		[Column(Storage="_StatusName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string StatusName
		{
			get
			{
				return this._StatusName;
			}
			set
			{
				if ((this._StatusName != value))
				{
					this._StatusName = value;
				}
			}
		}
	}
	
	public partial class spuGetStatusIDByStatusNameResult
	{
		
		private int _StatusID;
		
		public spuGetStatusIDByStatusNameResult()
		{
		}
		
		[Column(Storage="_StatusID", DbType="Int NOT NULL")]
		public int StatusID
		{
			get
			{
				return this._StatusID;
			}
			set
			{
				if ((this._StatusID != value))
				{
					this._StatusID = value;
				}
			}
		}
	}
	
	public partial class spuGetUsingRoomResult
	{
		
		private int _RoomID;
		
		private string _Name;
		
		private int _TypeID;
		
		private int _Status;
		
		private int _Capacity;
		
		private string _ComingDate;
		
		private int _ElectricNo;
		
		private int _WaterNo;
		
		public spuGetUsingRoomResult()
		{
		}
		
		[Column(Storage="_RoomID", DbType="Int NOT NULL")]
		public int RoomID
		{
			get
			{
				return this._RoomID;
			}
			set
			{
				if ((this._RoomID != value))
				{
					this._RoomID = value;
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
		
		[Column(Storage="_TypeID", DbType="Int NOT NULL")]
		public int TypeID
		{
			get
			{
				return this._TypeID;
			}
			set
			{
				if ((this._TypeID != value))
				{
					this._TypeID = value;
				}
			}
		}
		
		[Column(Storage="_Status", DbType="Int NOT NULL")]
		public int Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this._Status = value;
				}
			}
		}
		
		[Column(Storage="_Capacity", DbType="Int NOT NULL")]
		public int Capacity
		{
			get
			{
				return this._Capacity;
			}
			set
			{
				if ((this._Capacity != value))
				{
					this._Capacity = value;
				}
			}
		}
		
		[Column(Storage="_ComingDate", DbType="VarChar(20)")]
		public string ComingDate
		{
			get
			{
				return this._ComingDate;
			}
			set
			{
				if ((this._ComingDate != value))
				{
					this._ComingDate = value;
				}
			}
		}
		
		[Column(Storage="_ElectricNo", DbType="Int NOT NULL")]
		public int ElectricNo
		{
			get
			{
				return this._ElectricNo;
			}
			set
			{
				if ((this._ElectricNo != value))
				{
					this._ElectricNo = value;
				}
			}
		}
		
		[Column(Storage="_WaterNo", DbType="Int NOT NULL")]
		public int WaterNo
		{
			get
			{
				return this._WaterNo;
			}
			set
			{
				if ((this._WaterNo != value))
				{
					this._WaterNo = value;
				}
			}
		}
	}
	
	public partial class spuGetWaterFeeResult
	{
		
		private string _FeeName;
		
		private decimal _FeeCost;
		
		public spuGetWaterFeeResult()
		{
		}
		
		[Column(Storage="_FeeName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string FeeName
		{
			get
			{
				return this._FeeName;
			}
			set
			{
				if ((this._FeeName != value))
				{
					this._FeeName = value;
				}
			}
		}
		
		[Column(Storage="_FeeCost", DbType="Decimal(0,0) NOT NULL")]
		public decimal FeeCost
		{
			get
			{
				return this._FeeCost;
			}
			set
			{
				if ((this._FeeCost != value))
				{
					this._FeeCost = value;
				}
			}
		}
	}
	
	public partial class spuGetWaterNoResult
	{
		
		private int _RoomID;
		
		private string _Month;
		
		private int _OldNumber;
		
		private int _NewNumber;
		
		public spuGetWaterNoResult()
		{
		}
		
		[Column(Storage="_RoomID", DbType="Int NOT NULL")]
		public int RoomID
		{
			get
			{
				return this._RoomID;
			}
			set
			{
				if ((this._RoomID != value))
				{
					this._RoomID = value;
				}
			}
		}
		
		[Column(Storage="_Month", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string Month
		{
			get
			{
				return this._Month;
			}
			set
			{
				if ((this._Month != value))
				{
					this._Month = value;
				}
			}
		}
		
		[Column(Storage="_OldNumber", DbType="Int NOT NULL")]
		public int OldNumber
		{
			get
			{
				return this._OldNumber;
			}
			set
			{
				if ((this._OldNumber != value))
				{
					this._OldNumber = value;
				}
			}
		}
		
		[Column(Storage="_NewNumber", DbType="Int NOT NULL")]
		public int NewNumber
		{
			get
			{
				return this._NewNumber;
			}
			set
			{
				if ((this._NewNumber != value))
				{
					this._NewNumber = value;
				}
			}
		}
	}
	
	public partial class spuGetReceiptsResult
	{
		
		private int _ReceiptID;
		
		private int _RoomID;
		
		private decimal _RoomFee;
		
		private decimal _WaterFee;
		
		private decimal _ElectricFee;
		
		private System.Nullable<decimal> _OtherFee;
		
		private string _Note;
		
		private System.Nullable<decimal> _Debt;
		
		private string _Date;
		
		private int _StatusID;
		
		private int _RoomID1;
		
		private string _Name;
		
		private int _TypeID;
		
		private int _Status;
		
		private int _Capacity;
		
		private string _ComingDate;
		
		private int _ElectricNo;
		
		private int _WaterNo;
		
		private int _StatusID1;
		
		private string _StatusName;
		
		private System.Nullable<decimal> _Total;
		
		public spuGetReceiptsResult()
		{
		}
		
		[Column(Storage="_ReceiptID", DbType="Int NOT NULL")]
		public int ReceiptID
		{
			get
			{
				return this._ReceiptID;
			}
			set
			{
				if ((this._ReceiptID != value))
				{
					this._ReceiptID = value;
				}
			}
		}
		
		[Column(Storage="_RoomID", DbType="Int NOT NULL")]
		public int RoomID
		{
			get
			{
				return this._RoomID;
			}
			set
			{
				if ((this._RoomID != value))
				{
					this._RoomID = value;
				}
			}
		}
		
		[Column(Storage="_RoomFee", DbType="Decimal(0,0) NOT NULL")]
		public decimal RoomFee
		{
			get
			{
				return this._RoomFee;
			}
			set
			{
				if ((this._RoomFee != value))
				{
					this._RoomFee = value;
				}
			}
		}
		
		[Column(Storage="_WaterFee", DbType="Decimal(0,0) NOT NULL")]
		public decimal WaterFee
		{
			get
			{
				return this._WaterFee;
			}
			set
			{
				if ((this._WaterFee != value))
				{
					this._WaterFee = value;
				}
			}
		}
		
		[Column(Storage="_ElectricFee", DbType="Decimal(0,0) NOT NULL")]
		public decimal ElectricFee
		{
			get
			{
				return this._ElectricFee;
			}
			set
			{
				if ((this._ElectricFee != value))
				{
					this._ElectricFee = value;
				}
			}
		}
		
		[Column(Storage="_OtherFee", DbType="Decimal(0,0)")]
		public System.Nullable<decimal> OtherFee
		{
			get
			{
				return this._OtherFee;
			}
			set
			{
				if ((this._OtherFee != value))
				{
					this._OtherFee = value;
				}
			}
		}
		
		[Column(Storage="_Note", DbType="NVarChar(50)")]
		public string Note
		{
			get
			{
				return this._Note;
			}
			set
			{
				if ((this._Note != value))
				{
					this._Note = value;
				}
			}
		}
		
		[Column(Storage="_Debt", DbType="Decimal(0,0)")]
		public System.Nullable<decimal> Debt
		{
			get
			{
				return this._Debt;
			}
			set
			{
				if ((this._Debt != value))
				{
					this._Debt = value;
				}
			}
		}
		
		[Column(Storage="_Date", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this._Date = value;
				}
			}
		}
		
		[Column(Storage="_StatusID", DbType="Int NOT NULL")]
		public int StatusID
		{
			get
			{
				return this._StatusID;
			}
			set
			{
				if ((this._StatusID != value))
				{
					this._StatusID = value;
				}
			}
		}
		
		[Column(Storage="_RoomID1", DbType="Int NOT NULL")]
		public int RoomID1
		{
			get
			{
				return this._RoomID1;
			}
			set
			{
				if ((this._RoomID1 != value))
				{
					this._RoomID1 = value;
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
		
		[Column(Storage="_TypeID", DbType="Int NOT NULL")]
		public int TypeID
		{
			get
			{
				return this._TypeID;
			}
			set
			{
				if ((this._TypeID != value))
				{
					this._TypeID = value;
				}
			}
		}
		
		[Column(Storage="_Status", DbType="Int NOT NULL")]
		public int Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this._Status = value;
				}
			}
		}
		
		[Column(Storage="_Capacity", DbType="Int NOT NULL")]
		public int Capacity
		{
			get
			{
				return this._Capacity;
			}
			set
			{
				if ((this._Capacity != value))
				{
					this._Capacity = value;
				}
			}
		}
		
		[Column(Storage="_ComingDate", DbType="VarChar(20)")]
		public string ComingDate
		{
			get
			{
				return this._ComingDate;
			}
			set
			{
				if ((this._ComingDate != value))
				{
					this._ComingDate = value;
				}
			}
		}
		
		[Column(Storage="_ElectricNo", DbType="Int NOT NULL")]
		public int ElectricNo
		{
			get
			{
				return this._ElectricNo;
			}
			set
			{
				if ((this._ElectricNo != value))
				{
					this._ElectricNo = value;
				}
			}
		}
		
		[Column(Storage="_WaterNo", DbType="Int NOT NULL")]
		public int WaterNo
		{
			get
			{
				return this._WaterNo;
			}
			set
			{
				if ((this._WaterNo != value))
				{
					this._WaterNo = value;
				}
			}
		}
		
		[Column(Storage="_StatusID1", DbType="Int NOT NULL")]
		public int StatusID1
		{
			get
			{
				return this._StatusID1;
			}
			set
			{
				if ((this._StatusID1 != value))
				{
					this._StatusID1 = value;
				}
			}
		}
		
		[Column(Storage="_StatusName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string StatusName
		{
			get
			{
				return this._StatusName;
			}
			set
			{
				if ((this._StatusName != value))
				{
					this._StatusName = value;
				}
			}
		}
		
		[Column(Storage="_Total", DbType="Decimal(0,0)")]
		public System.Nullable<decimal> Total
		{
			get
			{
				return this._Total;
			}
			set
			{
				if ((this._Total != value))
				{
					this._Total = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
