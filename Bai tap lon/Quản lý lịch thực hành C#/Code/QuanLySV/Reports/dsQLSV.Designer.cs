//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace QLSV_GiaoDien.Reports {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("dsQLSV")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class dsQLSV : global::System.Data.DataSet {
        
        private DiemDataTable tableDiem;
        
        private DK_MonHocDataTable tableDK_MonHoc;
        
        private GiaoVienDataTable tableGiaoVien;
        
        private HeDataTable tableHe;
        
        private KhoaDataTable tableKhoa;
        
        private KhoaHocDataTable tableKhoaHoc;
        
        private LopDataTable tableLop;
        
        private MonHocDataTable tableMonHoc;
        
        private NganhDataTable tableNganh;
        
        private SinhVienDataTable tableSinhVien;
        
        private tb_UserDataTable tabletb_User;
        
        private global::System.Data.DataRelation relationFK_SinhVien_Diem;
        
        private global::System.Data.DataRelation relationFK_Diem_MonHoc;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public dsQLSV() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected dsQLSV(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["Diem"] != null)) {
                    base.Tables.Add(new DiemDataTable(ds.Tables["Diem"]));
                }
                if ((ds.Tables["DK_MonHoc"] != null)) {
                    base.Tables.Add(new DK_MonHocDataTable(ds.Tables["DK_MonHoc"]));
                }
                if ((ds.Tables["GiaoVien"] != null)) {
                    base.Tables.Add(new GiaoVienDataTable(ds.Tables["GiaoVien"]));
                }
                if ((ds.Tables["He"] != null)) {
                    base.Tables.Add(new HeDataTable(ds.Tables["He"]));
                }
                if ((ds.Tables["Khoa"] != null)) {
                    base.Tables.Add(new KhoaDataTable(ds.Tables["Khoa"]));
                }
                if ((ds.Tables["KhoaHoc"] != null)) {
                    base.Tables.Add(new KhoaHocDataTable(ds.Tables["KhoaHoc"]));
                }
                if ((ds.Tables["Lop"] != null)) {
                    base.Tables.Add(new LopDataTable(ds.Tables["Lop"]));
                }
                if ((ds.Tables["MonHoc"] != null)) {
                    base.Tables.Add(new MonHocDataTable(ds.Tables["MonHoc"]));
                }
                if ((ds.Tables["Nganh"] != null)) {
                    base.Tables.Add(new NganhDataTable(ds.Tables["Nganh"]));
                }
                if ((ds.Tables["SinhVien"] != null)) {
                    base.Tables.Add(new SinhVienDataTable(ds.Tables["SinhVien"]));
                }
                if ((ds.Tables["tb_User"] != null)) {
                    base.Tables.Add(new tb_UserDataTable(ds.Tables["tb_User"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DiemDataTable Diem {
            get {
                return this.tableDiem;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DK_MonHocDataTable DK_MonHoc {
            get {
                return this.tableDK_MonHoc;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GiaoVienDataTable GiaoVien {
            get {
                return this.tableGiaoVien;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public HeDataTable He {
            get {
                return this.tableHe;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public KhoaDataTable Khoa {
            get {
                return this.tableKhoa;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public KhoaHocDataTable KhoaHoc {
            get {
                return this.tableKhoaHoc;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LopDataTable Lop {
            get {
                return this.tableLop;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MonHocDataTable MonHoc {
            get {
                return this.tableMonHoc;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public NganhDataTable Nganh {
            get {
                return this.tableNganh;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SinhVienDataTable SinhVien {
            get {
                return this.tableSinhVien;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public tb_UserDataTable tb_User {
            get {
                return this.tabletb_User;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            dsQLSV cln = ((dsQLSV)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["Diem"] != null)) {
                    base.Tables.Add(new DiemDataTable(ds.Tables["Diem"]));
                }
                if ((ds.Tables["DK_MonHoc"] != null)) {
                    base.Tables.Add(new DK_MonHocDataTable(ds.Tables["DK_MonHoc"]));
                }
                if ((ds.Tables["GiaoVien"] != null)) {
                    base.Tables.Add(new GiaoVienDataTable(ds.Tables["GiaoVien"]));
                }
                if ((ds.Tables["He"] != null)) {
                    base.Tables.Add(new HeDataTable(ds.Tables["He"]));
                }
                if ((ds.Tables["Khoa"] != null)) {
                    base.Tables.Add(new KhoaDataTable(ds.Tables["Khoa"]));
                }
                if ((ds.Tables["KhoaHoc"] != null)) {
                    base.Tables.Add(new KhoaHocDataTable(ds.Tables["KhoaHoc"]));
                }
                if ((ds.Tables["Lop"] != null)) {
                    base.Tables.Add(new LopDataTable(ds.Tables["Lop"]));
                }
                if ((ds.Tables["MonHoc"] != null)) {
                    base.Tables.Add(new MonHocDataTable(ds.Tables["MonHoc"]));
                }
                if ((ds.Tables["Nganh"] != null)) {
                    base.Tables.Add(new NganhDataTable(ds.Tables["Nganh"]));
                }
                if ((ds.Tables["SinhVien"] != null)) {
                    base.Tables.Add(new SinhVienDataTable(ds.Tables["SinhVien"]));
                }
                if ((ds.Tables["tb_User"] != null)) {
                    base.Tables.Add(new tb_UserDataTable(ds.Tables["tb_User"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableDiem = ((DiemDataTable)(base.Tables["Diem"]));
            if ((initTable == true)) {
                if ((this.tableDiem != null)) {
                    this.tableDiem.InitVars();
                }
            }
            this.tableDK_MonHoc = ((DK_MonHocDataTable)(base.Tables["DK_MonHoc"]));
            if ((initTable == true)) {
                if ((this.tableDK_MonHoc != null)) {
                    this.tableDK_MonHoc.InitVars();
                }
            }
            this.tableGiaoVien = ((GiaoVienDataTable)(base.Tables["GiaoVien"]));
            if ((initTable == true)) {
                if ((this.tableGiaoVien != null)) {
                    this.tableGiaoVien.InitVars();
                }
            }
            this.tableHe = ((HeDataTable)(base.Tables["He"]));
            if ((initTable == true)) {
                if ((this.tableHe != null)) {
                    this.tableHe.InitVars();
                }
            }
            this.tableKhoa = ((KhoaDataTable)(base.Tables["Khoa"]));
            if ((initTable == true)) {
                if ((this.tableKhoa != null)) {
                    this.tableKhoa.InitVars();
                }
            }
            this.tableKhoaHoc = ((KhoaHocDataTable)(base.Tables["KhoaHoc"]));
            if ((initTable == true)) {
                if ((this.tableKhoaHoc != null)) {
                    this.tableKhoaHoc.InitVars();
                }
            }
            this.tableLop = ((LopDataTable)(base.Tables["Lop"]));
            if ((initTable == true)) {
                if ((this.tableLop != null)) {
                    this.tableLop.InitVars();
                }
            }
            this.tableMonHoc = ((MonHocDataTable)(base.Tables["MonHoc"]));
            if ((initTable == true)) {
                if ((this.tableMonHoc != null)) {
                    this.tableMonHoc.InitVars();
                }
            }
            this.tableNganh = ((NganhDataTable)(base.Tables["Nganh"]));
            if ((initTable == true)) {
                if ((this.tableNganh != null)) {
                    this.tableNganh.InitVars();
                }
            }
            this.tableSinhVien = ((SinhVienDataTable)(base.Tables["SinhVien"]));
            if ((initTable == true)) {
                if ((this.tableSinhVien != null)) {
                    this.tableSinhVien.InitVars();
                }
            }
            this.tabletb_User = ((tb_UserDataTable)(base.Tables["tb_User"]));
            if ((initTable == true)) {
                if ((this.tabletb_User != null)) {
                    this.tabletb_User.InitVars();
                }
            }
            this.relationFK_SinhVien_Diem = this.Relations["FK_SinhVien_Diem"];
            this.relationFK_Diem_MonHoc = this.Relations["FK_Diem_MonHoc"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "dsQLSV";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/dsQLSV.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableDiem = new DiemDataTable();
            base.Tables.Add(this.tableDiem);
            this.tableDK_MonHoc = new DK_MonHocDataTable();
            base.Tables.Add(this.tableDK_MonHoc);
            this.tableGiaoVien = new GiaoVienDataTable();
            base.Tables.Add(this.tableGiaoVien);
            this.tableHe = new HeDataTable();
            base.Tables.Add(this.tableHe);
            this.tableKhoa = new KhoaDataTable();
            base.Tables.Add(this.tableKhoa);
            this.tableKhoaHoc = new KhoaHocDataTable();
            base.Tables.Add(this.tableKhoaHoc);
            this.tableLop = new LopDataTable();
            base.Tables.Add(this.tableLop);
            this.tableMonHoc = new MonHocDataTable();
            base.Tables.Add(this.tableMonHoc);
            this.tableNganh = new NganhDataTable();
            base.Tables.Add(this.tableNganh);
            this.tableSinhVien = new SinhVienDataTable();
            base.Tables.Add(this.tableSinhVien);
            this.tabletb_User = new tb_UserDataTable();
            base.Tables.Add(this.tabletb_User);
            global::System.Data.ForeignKeyConstraint fkc;
            fkc = new global::System.Data.ForeignKeyConstraint("FK_SinhVien_Diem", new global::System.Data.DataColumn[] {
                        this.tableSinhVien.MaSinhVienColumn}, new global::System.Data.DataColumn[] {
                        this.tableDiem.MaSVColumn});
            this.tableDiem.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("FK_Diem_MonHoc", new global::System.Data.DataColumn[] {
                        this.tableMonHoc.MaMonHocColumn}, new global::System.Data.DataColumn[] {
                        this.tableDiem.MaMonHocColumn});
            this.tableDiem.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            this.relationFK_SinhVien_Diem = new global::System.Data.DataRelation("FK_SinhVien_Diem", new global::System.Data.DataColumn[] {
                        this.tableSinhVien.MaSinhVienColumn}, new global::System.Data.DataColumn[] {
                        this.tableDiem.MaSVColumn}, false);
            this.Relations.Add(this.relationFK_SinhVien_Diem);
            this.relationFK_Diem_MonHoc = new global::System.Data.DataRelation("FK_Diem_MonHoc", new global::System.Data.DataColumn[] {
                        this.tableMonHoc.MaMonHocColumn}, new global::System.Data.DataColumn[] {
                        this.tableDiem.MaMonHocColumn}, false);
            this.Relations.Add(this.relationFK_Diem_MonHoc);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDiem() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDK_MonHoc() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGiaoVien() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeHe() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeKhoa() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeKhoaHoc() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLop() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeMonHoc() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeNganh() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSinhVien() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializetb_User() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            dsQLSV ds = new dsQLSV();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void DiemRowChangeEventHandler(object sender, DiemRowChangeEvent e);
        
        public delegate void DK_MonHocRowChangeEventHandler(object sender, DK_MonHocRowChangeEvent e);
        
        public delegate void GiaoVienRowChangeEventHandler(object sender, GiaoVienRowChangeEvent e);
        
        public delegate void HeRowChangeEventHandler(object sender, HeRowChangeEvent e);
        
        public delegate void KhoaRowChangeEventHandler(object sender, KhoaRowChangeEvent e);
        
        public delegate void KhoaHocRowChangeEventHandler(object sender, KhoaHocRowChangeEvent e);
        
        public delegate void LopRowChangeEventHandler(object sender, LopRowChangeEvent e);
        
        public delegate void MonHocRowChangeEventHandler(object sender, MonHocRowChangeEvent e);
        
        public delegate void NganhRowChangeEventHandler(object sender, NganhRowChangeEvent e);
        
        public delegate void SinhVienRowChangeEventHandler(object sender, SinhVienRowChangeEvent e);
        
        public delegate void tb_UserRowChangeEventHandler(object sender, tb_UserRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DiemDataTable : global::System.Data.TypedTableBase<DiemRow> {
            
            private global::System.Data.DataColumn columnMaMonHoc;
            
            private global::System.Data.DataColumn columnMaSV;
            
            private global::System.Data.DataColumn columnDiemLanI;
            
            private global::System.Data.DataColumn columnDiemLanII;
            
            private global::System.Data.DataColumn columnLanThi;
            
            private global::System.Data.DataColumn columnNgayThi;
            
            private global::System.Data.DataColumn columnGhiChu;
            
            private global::System.Data.DataColumn columnHoten;
            
            private global::System.Data.DataColumn columnTenMonHoc;
            
            private global::System.Data.DataColumn columnSoTinChi;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DiemDataTable() {
                this.TableName = "Diem";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DiemDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DiemDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MaMonHocColumn {
                get {
                    return this.columnMaMonHoc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MaSVColumn {
                get {
                    return this.columnMaSV;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DiemLanIColumn {
                get {
                    return this.columnDiemLanI;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DiemLanIIColumn {
                get {
                    return this.columnDiemLanII;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LanThiColumn {
                get {
                    return this.columnLanThi;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NgayThiColumn {
                get {
                    return this.columnNgayThi;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GhiChuColumn {
                get {
                    return this.columnGhiChu;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HotenColumn {
                get {
                    return this.columnHoten;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TenMonHocColumn {
                get {
                    return this.columnTenMonHoc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SoTinChiColumn {
                get {
                    return this.columnSoTinChi;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DiemRow this[int index] {
                get {
                    return ((DiemRow)(this.Rows[index]));
                }
            }
            
            public event DiemRowChangeEventHandler DiemRowChanging;
            
            public event DiemRowChangeEventHandler DiemRowChanged;
            
            public event DiemRowChangeEventHandler DiemRowDeleting;
            
            public event DiemRowChangeEventHandler DiemRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDiemRow(DiemRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DiemRow AddDiemRow(MonHocRow parentMonHocRowByFK_Diem_MonHoc, SinhVienRow parentSinhVienRowByFK_SinhVien_Diem, string DiemLanI, string DiemLanII, string LanThi, string NgayThi, string GhiChu, string Hoten, string TenMonHoc, string SoTinChi) {
                DiemRow rowDiemRow = ((DiemRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null,
                        DiemLanI,
                        DiemLanII,
                        LanThi,
                        NgayThi,
                        GhiChu,
                        Hoten,
                        TenMonHoc,
                        SoTinChi};
                if ((parentMonHocRowByFK_Diem_MonHoc != null)) {
                    columnValuesArray[0] = parentMonHocRowByFK_Diem_MonHoc[0];
                }
                if ((parentSinhVienRowByFK_SinhVien_Diem != null)) {
                    columnValuesArray[1] = parentSinhVienRowByFK_SinhVien_Diem[0];
                }
                rowDiemRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowDiemRow);
                return rowDiemRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                DiemDataTable cln = ((DiemDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new DiemDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnMaMonHoc = base.Columns["MaMonHoc"];
                this.columnMaSV = base.Columns["MaSV"];
                this.columnDiemLanI = base.Columns["DiemLanI"];
                this.columnDiemLanII = base.Columns["DiemLanII"];
                this.columnLanThi = base.Columns["LanThi"];
                this.columnNgayThi = base.Columns["NgayThi"];
                this.columnGhiChu = base.Columns["GhiChu"];
                this.columnHoten = base.Columns["Hoten"];
                this.columnTenMonHoc = base.Columns["TenMonHoc"];
                this.columnSoTinChi = base.Columns["SoTinChi"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnMaMonHoc = new global::System.Data.DataColumn("MaMonHoc", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMaMonHoc);
                this.columnMaSV = new global::System.Data.DataColumn("MaSV", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMaSV);
                this.columnDiemLanI = new global::System.Data.DataColumn("DiemLanI", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDiemLanI);
                this.columnDiemLanII = new global::System.Data.DataColumn("DiemLanII", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDiemLanII);
                this.columnLanThi = new global::System.Data.DataColumn("LanThi", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLanThi);
                this.columnNgayThi = new global::System.Data.DataColumn("NgayThi", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNgayThi);
                this.columnGhiChu = new global::System.Data.DataColumn("GhiChu", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGhiChu);
                this.columnHoten = new global::System.Data.DataColumn("Hoten", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHoten);
                this.columnTenMonHoc = new global::System.Data.DataColumn("TenMonHoc", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTenMonHoc);
                this.columnSoTinChi = new global::System.Data.DataColumn("SoTinChi", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSoTinChi);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnMaMonHoc}, false));
                this.columnMaMonHoc.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DiemRow NewDiemRow() {
                return ((DiemRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new DiemRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(DiemRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DiemRowChanged != null)) {
                    this.DiemRowChanged(this, new DiemRowChangeEvent(((DiemRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DiemRowChanging != null)) {
                    this.DiemRowChanging(this, new DiemRowChangeEvent(((DiemRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DiemRowDeleted != null)) {
                    this.DiemRowDeleted(this, new DiemRowChangeEvent(((DiemRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DiemRowDeleting != null)) {
                    this.DiemRowDeleting(this, new DiemRowChangeEvent(((DiemRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDiemRow(DiemRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsQLSV ds = new dsQLSV();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DiemDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DK_MonHocDataTable : global::System.Data.TypedTableBase<DK_MonHocRow> {
            
            private global::System.Data.DataColumn columnMaMonHoc;
            
            private global::System.Data.DataColumn columnMaSinhVien;
            
            private global::System.Data.DataColumn columnNgayDangKy;
            
            private global::System.Data.DataColumn columnSoTinChi;
            
            private global::System.Data.DataColumn columnHocKy;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DK_MonHocDataTable() {
                this.TableName = "DK_MonHoc";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DK_MonHocDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DK_MonHocDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MaMonHocColumn {
                get {
                    return this.columnMaMonHoc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MaSinhVienColumn {
                get {
                    return this.columnMaSinhVien;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NgayDangKyColumn {
                get {
                    return this.columnNgayDangKy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SoTinChiColumn {
                get {
                    return this.columnSoTinChi;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HocKyColumn {
                get {
                    return this.columnHocKy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DK_MonHocRow this[int index] {
                get {
                    return ((DK_MonHocRow)(this.Rows[index]));
                }
            }
            
            public event DK_MonHocRowChangeEventHandler DK_MonHocRowChanging;
            
            public event DK_MonHocRowChangeEventHandler DK_MonHocRowChanged;
            
            public event DK_MonHocRowChangeEventHandler DK_MonHocRowDeleting;
            
            public event DK_MonHocRowChangeEventHandler DK_MonHocRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDK_MonHocRow(DK_MonHocRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DK_MonHocRow AddDK_MonHocRow(string MaMonHoc, string MaSinhVien, string NgayDangKy, string SoTinChi, string HocKy) {
                DK_MonHocRow rowDK_MonHocRow = ((DK_MonHocRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        MaMonHoc,
                        MaSinhVien,
                        NgayDangKy,
                        SoTinChi,
                        HocKy};
                rowDK_MonHocRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowDK_MonHocRow);
                return rowDK_MonHocRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                DK_MonHocDataTable cln = ((DK_MonHocDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new DK_MonHocDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnMaMonHoc = base.Columns["MaMonHoc"];
                this.columnMaSinhVien = base.Columns["MaSinhVien"];
                this.columnNgayDangKy = base.Columns["NgayDangKy"];
                this.columnSoTinChi = base.Columns["SoTinChi"];
                this.columnHocKy = base.Columns["HocKy"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnMaMonHoc = new global::System.Data.DataColumn("MaMonHoc", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMaMonHoc);
                this.columnMaSinhVien = new global::System.Data.DataColumn("MaSinhVien", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMaSinhVien);
                this.columnNgayDangKy = new global::System.Data.DataColumn("NgayDangKy", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNgayDangKy);
                this.columnSoTinChi = new global::System.Data.DataColumn("SoTinChi", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSoTinChi);
                this.columnHocKy = new global::System.Data.DataColumn("HocKy", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHocKy);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnMaMonHoc}, false));
                this.columnMaMonHoc.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DK_MonHocRow NewDK_MonHocRow() {
                return ((DK_MonHocRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new DK_MonHocRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(DK_MonHocRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DK_MonHocRowChanged != null)) {
                    this.DK_MonHocRowChanged(this, new DK_MonHocRowChangeEvent(((DK_MonHocRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DK_MonHocRowChanging != null)) {
                    this.DK_MonHocRowChanging(this, new DK_MonHocRowChangeEvent(((DK_MonHocRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DK_MonHocRowDeleted != null)) {
                    this.DK_MonHocRowDeleted(this, new DK_MonHocRowChangeEvent(((DK_MonHocRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DK_MonHocRowDeleting != null)) {
                    this.DK_MonHocRowDeleting(this, new DK_MonHocRowChangeEvent(((DK_MonHocRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDK_MonHocRow(DK_MonHocRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsQLSV ds = new dsQLSV();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DK_MonHocDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GiaoVienDataTable : global::System.Data.TypedTableBase<GiaoVienRow> {
            
            private global::System.Data.DataColumn columnMaGiaoVien;
            
            private global::System.Data.DataColumn columnTenGiaoVien;
            
            private global::System.Data.DataColumn columnMaKhoa;
            
            private global::System.Data.DataColumn columnGhiChu;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GiaoVienDataTable() {
                this.TableName = "GiaoVien";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GiaoVienDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GiaoVienDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MaGiaoVienColumn {
                get {
                    return this.columnMaGiaoVien;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TenGiaoVienColumn {
                get {
                    return this.columnTenGiaoVien;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MaKhoaColumn {
                get {
                    return this.columnMaKhoa;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GhiChuColumn {
                get {
                    return this.columnGhiChu;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GiaoVienRow this[int index] {
                get {
                    return ((GiaoVienRow)(this.Rows[index]));
                }
            }
            
            public event GiaoVienRowChangeEventHandler GiaoVienRowChanging;
            
            public event GiaoVienRowChangeEventHandler GiaoVienRowChanged;
            
            public event GiaoVienRowChangeEventHandler GiaoVienRowDeleting;
            
            public event GiaoVienRowChangeEventHandler GiaoVienRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGiaoVienRow(GiaoVienRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GiaoVienRow AddGiaoVienRow(string MaGiaoVien, string TenGiaoVien, string MaKhoa, string GhiChu) {
                GiaoVienRow rowGiaoVienRow = ((GiaoVienRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        MaGiaoVien,
                        TenGiaoVien,
                        MaKhoa,
                        GhiChu};
                rowGiaoVienRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGiaoVienRow);
                return rowGiaoVienRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                GiaoVienDataTable cln = ((GiaoVienDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GiaoVienDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnMaGiaoVien = base.Columns["MaGiaoVien"];
                this.columnTenGiaoVien = base.Columns["TenGiaoVien"];
                this.columnMaKhoa = base.Columns["MaKhoa"];
                this.columnGhiChu = base.Columns["GhiChu"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnMaGiaoVien = new global::System.Data.DataColumn("MaGiaoVien", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMaGiaoVien);
                this.columnTenGiaoVien = new global::System.Data.DataColumn("TenGiaoVien", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTenGiaoVien);
                this.columnMaKhoa = new global::System.Data.DataColumn("MaKhoa", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMaKhoa);
                this.columnGhiChu = new global::System.Data.DataColumn("GhiChu", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGhiChu);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GiaoVienRow NewGiaoVienRow() {
                return ((GiaoVienRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GiaoVienRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(GiaoVienRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GiaoVienRowChanged != null)) {
                    this.GiaoVienRowChanged(this, new GiaoVienRowChangeEvent(((GiaoVienRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GiaoVienRowChanging != null)) {
                    this.GiaoVienRowChanging(this, new GiaoVienRowChangeEvent(((GiaoVienRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GiaoVienRowDeleted != null)) {
                    this.GiaoVienRowDeleted(this, new GiaoVienRowChangeEvent(((GiaoVienRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GiaoVienRowDeleting != null)) {
                    this.GiaoVienRowDeleting(this, new GiaoVienRowChangeEvent(((GiaoVienRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGiaoVienRow(GiaoVienRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsQLSV ds = new dsQLSV();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GiaoVienDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class HeDataTable : global::System.Data.TypedTableBase<HeRow> {
            
            private global::System.Data.DataColumn columnMaHe;
            
            private global::System.Data.DataColumn columnTenHe;
            
            private global::System.Data.DataColumn columnGhiChu;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HeDataTable() {
                this.TableName = "He";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal HeDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected HeDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MaHeColumn {
                get {
                    return this.columnMaHe;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TenHeColumn {
                get {
                    return this.columnTenHe;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GhiChuColumn {
                get {
                    return this.columnGhiChu;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HeRow this[int index] {
                get {
                    return ((HeRow)(this.Rows[index]));
                }
            }
            
            public event HeRowChangeEventHandler HeRowChanging;
            
            public event HeRowChangeEventHandler HeRowChanged;
            
            public event HeRowChangeEventHandler HeRowDeleting;
            
            public event HeRowChangeEventHandler HeRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddHeRow(HeRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HeRow AddHeRow(string MaHe, string TenHe, string GhiChu) {
                HeRow rowHeRow = ((HeRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        MaHe,
                        TenHe,
                        GhiChu};
                rowHeRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowHeRow);
                return rowHeRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                HeDataTable cln = ((HeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new HeDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnMaHe = base.Columns["MaHe"];
                this.columnTenHe = base.Columns["TenHe"];
                this.columnGhiChu = base.Columns["GhiChu"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnMaHe = new global::System.Data.DataColumn("MaHe", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMaHe);
                this.columnTenHe = new global::System.Data.DataColumn("TenHe", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTenHe);
                this.columnGhiChu = new global::System.Data.DataColumn("GhiChu", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGhiChu);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HeRow NewHeRow() {
                return ((HeRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new HeRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(HeRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.HeRowChanged != null)) {
                    this.HeRowChanged(this, new HeRowChangeEvent(((HeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.HeRowChanging != null)) {
                    this.HeRowChanging(this, new HeRowChangeEvent(((HeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.HeRowDeleted != null)) {
                    this.HeRowDeleted(this, new HeRowChangeEvent(((HeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.HeRowDeleting != null)) {
                    this.HeRowDeleting(this, new HeRowChangeEvent(((HeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveHeRow(HeRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsQLSV ds = new dsQLSV();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "HeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class KhoaDataTable : global::System.Data.TypedTableBase<KhoaRow> {
            
            private global::System.Data.DataColumn columnMaKhoa;
            
            private global::System.Data.DataColumn columnTenKhoa;
            
            private global::System.Data.DataColumn columnGhiChu;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public KhoaDataTable() {
                this.TableName = "Khoa";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal KhoaDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected KhoaDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MaKhoaColumn {
                get {
                    return this.columnMaKhoa;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TenKhoaColumn {
                get {
                    return this.columnTenKhoa;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GhiChuColumn {
                get {
                    return this.columnGhiChu;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public KhoaRow this[int index] {
                get {
                    return ((KhoaRow)(this.Rows[index]));
                }
            }
            
            public event KhoaRowChangeEventHandler KhoaRowChanging;
            
            public event KhoaRowChangeEventHandler KhoaRowChanged;
            
            public event KhoaRowChangeEventHandler KhoaRowDeleting;
            
            public event KhoaRowChangeEventHandler KhoaRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddKhoaRow(KhoaRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public KhoaRow AddKhoaRow(string MaKhoa, string TenKhoa, string GhiChu) {
                KhoaRow rowKhoaRow = ((KhoaRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        MaKhoa,
                        TenKhoa,
                        GhiChu};
                rowKhoaRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowKhoaRow);
                return rowKhoaRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                KhoaDataTable cln = ((KhoaDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new KhoaDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnMaKhoa = base.Columns["MaKhoa"];
                this.columnTenKhoa = base.Columns["TenKhoa"];
                this.columnGhiChu = base.Columns["GhiChu"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnMaKhoa = new global::System.Data.DataColumn("MaKhoa", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMaKhoa);
                this.columnTenKhoa = new global::System.Data.DataColumn("TenKhoa", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTenKhoa);
                this.columnGhiChu = new global::System.Data.DataColumn("GhiChu", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGhiChu);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public KhoaRow NewKhoaRow() {
                return ((KhoaRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new KhoaRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(KhoaRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.KhoaRowChanged != null)) {
                    this.KhoaRowChanged(this, new KhoaRowChangeEvent(((KhoaRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.KhoaRowChanging != null)) {
                    this.KhoaRowChanging(this, new KhoaRowChangeEvent(((KhoaRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.KhoaRowDeleted != null)) {
                    this.KhoaRowDeleted(this, new KhoaRowChangeEvent(((KhoaRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.KhoaRowDeleting != null)) {
                    this.KhoaRowDeleting(this, new KhoaRowChangeEvent(((KhoaRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveKhoaRow(KhoaRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsQLSV ds = new dsQLSV();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "KhoaDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class KhoaHocDataTable : global::System.Data.TypedTableBase<KhoaHocRow> {
            
            private global::System.Data.DataColumn columnMaKhoaHoc;
            
            private global::System.Data.DataColumn columnTenKhoaHoc;
            
            private global::System.Data.DataColumn columnNgayBatDau;
            
            private global::System.Data.DataColumn columnNgayKetThuc;
            
            private global::System.Data.DataColumn columnGhiChu;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public KhoaHocDataTable() {
                this.TableName = "KhoaHoc";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal KhoaHocDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected KhoaHocDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MaKhoaHocColumn {
                get {
                    return this.columnMaKhoaHoc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TenKhoaHocColumn {
                get {
                    return this.columnTenKhoaHoc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NgayBatDauColumn {
                get {
                    return this.columnNgayBatDau;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NgayKetThucColumn {
                get {
                    return this.columnNgayKetThuc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GhiChuColumn {
                get {
                    return this.columnGhiChu;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public KhoaHocRow this[int index] {
                get {
                    return ((KhoaHocRow)(this.Rows[index]));
                }
            }
            
            public event KhoaHocRowChangeEventHandler KhoaHocRowChanging;
            
            public event KhoaHocRowChangeEventHandler KhoaHocRowChanged;
            
            public event KhoaHocRowChangeEventHandler KhoaHocRowDeleting;
            
            public event KhoaHocRowChangeEventHandler KhoaHocRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddKhoaHocRow(KhoaHocRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public KhoaHocRow AddKhoaHocRow(string MaKhoaHoc, string TenKhoaHoc, string NgayBatDau, string NgayKetThuc, string GhiChu) {
                KhoaHocRow rowKhoaHocRow = ((KhoaHocRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        MaKhoaHoc,
                        TenKhoaHoc,
                        NgayBatDau,
                        NgayKetThuc,
                        GhiChu};
                rowKhoaHocRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowKhoaHocRow);
                return rowKhoaHocRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                KhoaHocDataTable cln = ((KhoaHocDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new KhoaHocDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnMaKhoaHoc = base.Columns["MaKhoaHoc"];
                this.columnTenKhoaHoc = base.Columns["TenKhoaHoc"];
                this.columnNgayBatDau = base.Columns["NgayBatDau"];
                this.columnNgayKetThuc = base.Columns["NgayKetThuc"];
                this.columnGhiChu = base.Columns["GhiChu"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnMaKhoaHoc = new global::System.Data.DataColumn("MaKhoaHoc", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMaKhoaHoc);
                this.columnTenKhoaHoc = new global::System.Data.DataColumn("TenKhoaHoc", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTenKhoaHoc);
                this.columnNgayBatDau = new global::System.Data.DataColumn("NgayBatDau", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNgayBatDau);
                this.columnNgayKetThuc = new global::System.Data.DataColumn("NgayKetThuc", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNgayKetThuc);
                this.columnGhiChu = new global::System.Data.DataColumn("GhiChu", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGhiChu);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public KhoaHocRow NewKhoaHocRow() {
                return ((KhoaHocRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new KhoaHocRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(KhoaHocRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.KhoaHocRowChanged != null)) {
                    this.KhoaHocRowChanged(this, new KhoaHocRowChangeEvent(((KhoaHocRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.KhoaHocRowChanging != null)) {
                    this.KhoaHocRowChanging(this, new KhoaHocRowChangeEvent(((KhoaHocRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.KhoaHocRowDeleted != null)) {
                    this.KhoaHocRowDeleted(this, new KhoaHocRowChangeEvent(((KhoaHocRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.KhoaHocRowDeleting != null)) {
                    this.KhoaHocRowDeleting(this, new KhoaHocRowChangeEvent(((KhoaHocRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveKhoaHocRow(KhoaHocRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsQLSV ds = new dsQLSV();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "KhoaHocDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LopDataTable : global::System.Data.TypedTableBase<LopRow> {
            
            private global::System.Data.DataColumn columnMaLop;
            
            private global::System.Data.DataColumn columnMaKhoaHoc;
            
            private global::System.Data.DataColumn columnMaNganh;
            
            private global::System.Data.DataColumn columnTenLop;
            
            private global::System.Data.DataColumn columnGhiChu;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LopDataTable() {
                this.TableName = "Lop";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LopDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LopDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MaLopColumn {
                get {
                    return this.columnMaLop;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MaKhoaHocColumn {
                get {
                    return this.columnMaKhoaHoc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MaNganhColumn {
                get {
                    return this.columnMaNganh;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TenLopColumn {
                get {
                    return this.columnTenLop;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GhiChuColumn {
                get {
                    return this.columnGhiChu;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LopRow this[int index] {
                get {
                    return ((LopRow)(this.Rows[index]));
                }
            }
            
            public event LopRowChangeEventHandler LopRowChanging;
            
            public event LopRowChangeEventHandler LopRowChanged;
            
            public event LopRowChangeEventHandler LopRowDeleting;
            
            public event LopRowChangeEventHandler LopRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLopRow(LopRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LopRow AddLopRow(string MaLop, string MaKhoaHoc, string MaNganh, string TenLop, string GhiChu) {
                LopRow rowLopRow = ((LopRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        MaLop,
                        MaKhoaHoc,
                        MaNganh,
                        TenLop,
                        GhiChu};
                rowLopRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowLopRow);
                return rowLopRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                LopDataTable cln = ((LopDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new LopDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnMaLop = base.Columns["MaLop"];
                this.columnMaKhoaHoc = base.Columns["MaKhoaHoc"];
                this.columnMaNganh = base.Columns["MaNganh"];
                this.columnTenLop = base.Columns["TenLop"];
                this.columnGhiChu = base.Columns["GhiChu"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnMaLop = new global::System.Data.DataColumn("MaLop", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMaLop);
                this.columnMaKhoaHoc = new global::System.Data.DataColumn("MaKhoaHoc", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMaKhoaHoc);
                this.columnMaNganh = new global::System.Data.DataColumn("MaNganh", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMaNganh);
                this.columnTenLop = new global::System.Data.DataColumn("TenLop", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTenLop);
                this.columnGhiChu = new global::System.Data.DataColumn("GhiChu", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGhiChu);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LopRow NewLopRow() {
                return ((LopRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new LopRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(LopRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LopRowChanged != null)) {
                    this.LopRowChanged(this, new LopRowChangeEvent(((LopRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LopRowChanging != null)) {
                    this.LopRowChanging(this, new LopRowChangeEvent(((LopRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LopRowDeleted != null)) {
                    this.LopRowDeleted(this, new LopRowChangeEvent(((LopRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LopRowDeleting != null)) {
                    this.LopRowDeleting(this, new LopRowChangeEvent(((LopRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLopRow(LopRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsQLSV ds = new dsQLSV();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LopDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class MonHocDataTable : global::System.Data.TypedTableBase<MonHocRow> {
            
            private global::System.Data.DataColumn columnMaMonHoc;
            
            private global::System.Data.DataColumn columnTenMonHoc;
            
            private global::System.Data.DataColumn columnMaKhoa;
            
            private global::System.Data.DataColumn columnSoTinChi;
            
            private global::System.Data.DataColumn columnHinhThuc;
            
            private global::System.Data.DataColumn columnTongSoTiet;
            
            private global::System.Data.DataColumn columnSoTietLyThuyet;
            
            private global::System.Data.DataColumn columnSoTietThucHanh;
            
            private global::System.Data.DataColumn columnGhiChu;
            
            private global::System.Data.DataColumn columnTenKhoa;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MonHocDataTable() {
                this.TableName = "MonHoc";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MonHocDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected MonHocDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MaMonHocColumn {
                get {
                    return this.columnMaMonHoc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TenMonHocColumn {
                get {
                    return this.columnTenMonHoc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MaKhoaColumn {
                get {
                    return this.columnMaKhoa;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SoTinChiColumn {
                get {
                    return this.columnSoTinChi;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HinhThucColumn {
                get {
                    return this.columnHinhThuc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TongSoTietColumn {
                get {
                    return this.columnTongSoTiet;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SoTietLyThuyetColumn {
                get {
                    return this.columnSoTietLyThuyet;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SoTietThucHanhColumn {
                get {
                    return this.columnSoTietThucHanh;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GhiChuColumn {
                get {
                    return this.columnGhiChu;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TenKhoaColumn {
                get {
                    return this.columnTenKhoa;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MonHocRow this[int index] {
                get {
                    return ((MonHocRow)(this.Rows[index]));
                }
            }
            
            public event MonHocRowChangeEventHandler MonHocRowChanging;
            
            public event MonHocRowChangeEventHandler MonHocRowChanged;
            
            public event MonHocRowChangeEventHandler MonHocRowDeleting;
            
            public event MonHocRowChangeEventHandler MonHocRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddMonHocRow(MonHocRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MonHocRow AddMonHocRow(string MaMonHoc, string TenMonHoc, string MaKhoa, string SoTinChi, string HinhThuc, string TongSoTiet, string SoTietLyThuyet, string SoTietThucHanh, string GhiChu, string TenKhoa) {
                MonHocRow rowMonHocRow = ((MonHocRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        MaMonHoc,
                        TenMonHoc,
                        MaKhoa,
                        SoTinChi,
                        HinhThuc,
                        TongSoTiet,
                        SoTietLyThuyet,
                        SoTietThucHanh,
                        GhiChu,
                        TenKhoa};
                rowMonHocRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowMonHocRow);
                return rowMonHocRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                MonHocDataTable cln = ((MonHocDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new MonHocDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnMaMonHoc = base.Columns["MaMonHoc"];
                this.columnTenMonHoc = base.Columns["TenMonHoc"];
                this.columnMaKhoa = base.Columns["MaKhoa"];
                this.columnSoTinChi = base.Columns["SoTinChi"];
                this.columnHinhThuc = base.Columns["HinhThuc"];
                this.columnTongSoTiet = base.Columns["TongSoTiet"];
                this.columnSoTietLyThuyet = base.Columns["SoTietLyThuyet"];
                this.columnSoTietThucHanh = base.Columns["SoTietThucHanh"];
                this.columnGhiChu = base.Columns["GhiChu"];
                this.columnTenKhoa = base.Columns["TenKhoa"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnMaMonHoc = new global::System.Data.DataColumn("MaMonHoc", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMaMonHoc);
                this.columnTenMonHoc = new global::System.Data.DataColumn("TenMonHoc", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTenMonHoc);
                this.columnMaKhoa = new global::System.Data.DataColumn("MaKhoa", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMaKhoa);
                this.columnSoTinChi = new global::System.Data.DataColumn("SoTinChi", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSoTinChi);
                this.columnHinhThuc = new global::System.Data.DataColumn("HinhThuc", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHinhThuc);
                this.columnTongSoTiet = new global::System.Data.DataColumn("TongSoTiet", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTongSoTiet);
                this.columnSoTietLyThuyet = new global::System.Data.DataColumn("SoTietLyThuyet", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSoTietLyThuyet);
                this.columnSoTietThucHanh = new global::System.Data.DataColumn("SoTietThucHanh", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSoTietThucHanh);
                this.columnGhiChu = new global::System.Data.DataColumn("GhiChu", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGhiChu);
                this.columnTenKhoa = new global::System.Data.DataColumn("TenKhoa", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTenKhoa);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnMaMonHoc}, false));
                this.columnMaMonHoc.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MonHocRow NewMonHocRow() {
                return ((MonHocRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new MonHocRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(MonHocRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MonHocRowChanged != null)) {
                    this.MonHocRowChanged(this, new MonHocRowChangeEvent(((MonHocRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MonHocRowChanging != null)) {
                    this.MonHocRowChanging(this, new MonHocRowChangeEvent(((MonHocRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MonHocRowDeleted != null)) {
                    this.MonHocRowDeleted(this, new MonHocRowChangeEvent(((MonHocRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MonHocRowDeleting != null)) {
                    this.MonHocRowDeleting(this, new MonHocRowChangeEvent(((MonHocRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveMonHocRow(MonHocRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsQLSV ds = new dsQLSV();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "MonHocDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class NganhDataTable : global::System.Data.TypedTableBase<NganhRow> {
            
            private global::System.Data.DataColumn columnMaNganh;
            
            private global::System.Data.DataColumn columnMaHe;
            
            private global::System.Data.DataColumn columnTenNganh;
            
            private global::System.Data.DataColumn columnGhiChu;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NganhDataTable() {
                this.TableName = "Nganh";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal NganhDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected NganhDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MaNganhColumn {
                get {
                    return this.columnMaNganh;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MaHeColumn {
                get {
                    return this.columnMaHe;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TenNganhColumn {
                get {
                    return this.columnTenNganh;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GhiChuColumn {
                get {
                    return this.columnGhiChu;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NganhRow this[int index] {
                get {
                    return ((NganhRow)(this.Rows[index]));
                }
            }
            
            public event NganhRowChangeEventHandler NganhRowChanging;
            
            public event NganhRowChangeEventHandler NganhRowChanged;
            
            public event NganhRowChangeEventHandler NganhRowDeleting;
            
            public event NganhRowChangeEventHandler NganhRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddNganhRow(NganhRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NganhRow AddNganhRow(string MaNganh, string MaHe, string TenNganh, string GhiChu) {
                NganhRow rowNganhRow = ((NganhRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        MaNganh,
                        MaHe,
                        TenNganh,
                        GhiChu};
                rowNganhRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowNganhRow);
                return rowNganhRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                NganhDataTable cln = ((NganhDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new NganhDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnMaNganh = base.Columns["MaNganh"];
                this.columnMaHe = base.Columns["MaHe"];
                this.columnTenNganh = base.Columns["TenNganh"];
                this.columnGhiChu = base.Columns["GhiChu"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnMaNganh = new global::System.Data.DataColumn("MaNganh", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMaNganh);
                this.columnMaHe = new global::System.Data.DataColumn("MaHe", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMaHe);
                this.columnTenNganh = new global::System.Data.DataColumn("TenNganh", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTenNganh);
                this.columnGhiChu = new global::System.Data.DataColumn("GhiChu", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGhiChu);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NganhRow NewNganhRow() {
                return ((NganhRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new NganhRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(NganhRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.NganhRowChanged != null)) {
                    this.NganhRowChanged(this, new NganhRowChangeEvent(((NganhRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.NganhRowChanging != null)) {
                    this.NganhRowChanging(this, new NganhRowChangeEvent(((NganhRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.NganhRowDeleted != null)) {
                    this.NganhRowDeleted(this, new NganhRowChangeEvent(((NganhRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.NganhRowDeleting != null)) {
                    this.NganhRowDeleting(this, new NganhRowChangeEvent(((NganhRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveNganhRow(NganhRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsQLSV ds = new dsQLSV();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "NganhDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SinhVienDataTable : global::System.Data.TypedTableBase<SinhVienRow> {
            
            private global::System.Data.DataColumn columnMaSinhVien;
            
            private global::System.Data.DataColumn columnHoTen;
            
            private global::System.Data.DataColumn columnQueQuan;
            
            private global::System.Data.DataColumn columnNgaySinh;
            
            private global::System.Data.DataColumn columnNoiSinh;
            
            private global::System.Data.DataColumn columnGioiTinh;
            
            private global::System.Data.DataColumn columnMaLop;
            
            private global::System.Data.DataColumn columnHinh;
            
            private global::System.Data.DataColumn columnGhichu;
            
            private global::System.Data.DataColumn columnTenKhoaHoc;
            
            private global::System.Data.DataColumn columnTenLop;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SinhVienDataTable() {
                this.TableName = "SinhVien";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SinhVienDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SinhVienDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MaSinhVienColumn {
                get {
                    return this.columnMaSinhVien;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HoTenColumn {
                get {
                    return this.columnHoTen;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QueQuanColumn {
                get {
                    return this.columnQueQuan;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NgaySinhColumn {
                get {
                    return this.columnNgaySinh;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NoiSinhColumn {
                get {
                    return this.columnNoiSinh;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GioiTinhColumn {
                get {
                    return this.columnGioiTinh;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MaLopColumn {
                get {
                    return this.columnMaLop;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HinhColumn {
                get {
                    return this.columnHinh;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GhichuColumn {
                get {
                    return this.columnGhichu;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TenKhoaHocColumn {
                get {
                    return this.columnTenKhoaHoc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TenLopColumn {
                get {
                    return this.columnTenLop;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SinhVienRow this[int index] {
                get {
                    return ((SinhVienRow)(this.Rows[index]));
                }
            }
            
            public event SinhVienRowChangeEventHandler SinhVienRowChanging;
            
            public event SinhVienRowChangeEventHandler SinhVienRowChanged;
            
            public event SinhVienRowChangeEventHandler SinhVienRowDeleting;
            
            public event SinhVienRowChangeEventHandler SinhVienRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSinhVienRow(SinhVienRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SinhVienRow AddSinhVienRow(string MaSinhVien, string HoTen, string QueQuan, string NgaySinh, string NoiSinh, string GioiTinh, string MaLop, string Hinh, string Ghichu, string TenKhoaHoc, string TenLop) {
                SinhVienRow rowSinhVienRow = ((SinhVienRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        MaSinhVien,
                        HoTen,
                        QueQuan,
                        NgaySinh,
                        NoiSinh,
                        GioiTinh,
                        MaLop,
                        Hinh,
                        Ghichu,
                        TenKhoaHoc,
                        TenLop};
                rowSinhVienRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSinhVienRow);
                return rowSinhVienRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SinhVienDataTable cln = ((SinhVienDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SinhVienDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnMaSinhVien = base.Columns["MaSinhVien"];
                this.columnHoTen = base.Columns["HoTen"];
                this.columnQueQuan = base.Columns["QueQuan"];
                this.columnNgaySinh = base.Columns["NgaySinh"];
                this.columnNoiSinh = base.Columns["NoiSinh"];
                this.columnGioiTinh = base.Columns["GioiTinh"];
                this.columnMaLop = base.Columns["MaLop"];
                this.columnHinh = base.Columns["Hinh"];
                this.columnGhichu = base.Columns["Ghichu"];
                this.columnTenKhoaHoc = base.Columns["TenKhoaHoc"];
                this.columnTenLop = base.Columns["TenLop"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnMaSinhVien = new global::System.Data.DataColumn("MaSinhVien", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMaSinhVien);
                this.columnHoTen = new global::System.Data.DataColumn("HoTen", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHoTen);
                this.columnQueQuan = new global::System.Data.DataColumn("QueQuan", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQueQuan);
                this.columnNgaySinh = new global::System.Data.DataColumn("NgaySinh", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNgaySinh);
                this.columnNoiSinh = new global::System.Data.DataColumn("NoiSinh", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNoiSinh);
                this.columnGioiTinh = new global::System.Data.DataColumn("GioiTinh", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGioiTinh);
                this.columnMaLop = new global::System.Data.DataColumn("MaLop", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMaLop);
                this.columnHinh = new global::System.Data.DataColumn("Hinh", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHinh);
                this.columnGhichu = new global::System.Data.DataColumn("Ghichu", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGhichu);
                this.columnTenKhoaHoc = new global::System.Data.DataColumn("TenKhoaHoc", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTenKhoaHoc);
                this.columnTenLop = new global::System.Data.DataColumn("TenLop", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTenLop);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnMaSinhVien}, false));
                this.columnMaSinhVien.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SinhVienRow NewSinhVienRow() {
                return ((SinhVienRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SinhVienRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SinhVienRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SinhVienRowChanged != null)) {
                    this.SinhVienRowChanged(this, new SinhVienRowChangeEvent(((SinhVienRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SinhVienRowChanging != null)) {
                    this.SinhVienRowChanging(this, new SinhVienRowChangeEvent(((SinhVienRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SinhVienRowDeleted != null)) {
                    this.SinhVienRowDeleted(this, new SinhVienRowChangeEvent(((SinhVienRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SinhVienRowDeleting != null)) {
                    this.SinhVienRowDeleting(this, new SinhVienRowChangeEvent(((SinhVienRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSinhVienRow(SinhVienRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsQLSV ds = new dsQLSV();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SinhVienDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class tb_UserDataTable : global::System.Data.TypedTableBase<tb_UserRow> {
            
            private global::System.Data.DataColumn columnUsername;
            
            private global::System.Data.DataColumn columnPass;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tb_UserDataTable() {
                this.TableName = "tb_User";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tb_UserDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected tb_UserDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UsernameColumn {
                get {
                    return this.columnUsername;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PassColumn {
                get {
                    return this.columnPass;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tb_UserRow this[int index] {
                get {
                    return ((tb_UserRow)(this.Rows[index]));
                }
            }
            
            public event tb_UserRowChangeEventHandler tb_UserRowChanging;
            
            public event tb_UserRowChangeEventHandler tb_UserRowChanged;
            
            public event tb_UserRowChangeEventHandler tb_UserRowDeleting;
            
            public event tb_UserRowChangeEventHandler tb_UserRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addtb_UserRow(tb_UserRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tb_UserRow Addtb_UserRow(string Username, string Pass) {
                tb_UserRow rowtb_UserRow = ((tb_UserRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Username,
                        Pass};
                rowtb_UserRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowtb_UserRow);
                return rowtb_UserRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                tb_UserDataTable cln = ((tb_UserDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new tb_UserDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnUsername = base.Columns["Username"];
                this.columnPass = base.Columns["Pass"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnUsername = new global::System.Data.DataColumn("Username", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUsername);
                this.columnPass = new global::System.Data.DataColumn("Pass", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPass);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tb_UserRow Newtb_UserRow() {
                return ((tb_UserRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new tb_UserRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(tb_UserRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.tb_UserRowChanged != null)) {
                    this.tb_UserRowChanged(this, new tb_UserRowChangeEvent(((tb_UserRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.tb_UserRowChanging != null)) {
                    this.tb_UserRowChanging(this, new tb_UserRowChangeEvent(((tb_UserRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.tb_UserRowDeleted != null)) {
                    this.tb_UserRowDeleted(this, new tb_UserRowChangeEvent(((tb_UserRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.tb_UserRowDeleting != null)) {
                    this.tb_UserRowDeleting(this, new tb_UserRowChangeEvent(((tb_UserRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removetb_UserRow(tb_UserRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsQLSV ds = new dsQLSV();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "tb_UserDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DiemRow : global::System.Data.DataRow {
            
            private DiemDataTable tableDiem;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DiemRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDiem = ((DiemDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MaMonHoc {
                get {
                    try {
                        return ((string)(this[this.tableDiem.MaMonHocColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MaMonHoc\' in table \'Diem\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDiem.MaMonHocColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MaSV {
                get {
                    try {
                        return ((string)(this[this.tableDiem.MaSVColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MaSV\' in table \'Diem\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDiem.MaSVColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DiemLanI {
                get {
                    try {
                        return ((string)(this[this.tableDiem.DiemLanIColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DiemLanI\' in table \'Diem\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDiem.DiemLanIColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DiemLanII {
                get {
                    try {
                        return ((string)(this[this.tableDiem.DiemLanIIColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DiemLanII\' in table \'Diem\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDiem.DiemLanIIColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LanThi {
                get {
                    try {
                        return ((string)(this[this.tableDiem.LanThiColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LanThi\' in table \'Diem\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDiem.LanThiColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NgayThi {
                get {
                    try {
                        return ((string)(this[this.tableDiem.NgayThiColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NgayThi\' in table \'Diem\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDiem.NgayThiColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GhiChu {
                get {
                    try {
                        return ((string)(this[this.tableDiem.GhiChuColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GhiChu\' in table \'Diem\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDiem.GhiChuColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Hoten {
                get {
                    try {
                        return ((string)(this[this.tableDiem.HotenColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Hoten\' in table \'Diem\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDiem.HotenColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TenMonHoc {
                get {
                    try {
                        return ((string)(this[this.tableDiem.TenMonHocColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TenMonHoc\' in table \'Diem\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDiem.TenMonHocColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SoTinChi {
                get {
                    try {
                        return ((string)(this[this.tableDiem.SoTinChiColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SoTinChi\' in table \'Diem\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDiem.SoTinChiColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SinhVienRow SinhVienRow {
                get {
                    return ((SinhVienRow)(this.GetParentRow(this.Table.ParentRelations["FK_SinhVien_Diem"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_SinhVien_Diem"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MonHocRow MonHocRow {
                get {
                    return ((MonHocRow)(this.GetParentRow(this.Table.ParentRelations["FK_Diem_MonHoc"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Diem_MonHoc"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMaMonHocNull() {
                return this.IsNull(this.tableDiem.MaMonHocColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMaMonHocNull() {
                this[this.tableDiem.MaMonHocColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMaSVNull() {
                return this.IsNull(this.tableDiem.MaSVColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMaSVNull() {
                this[this.tableDiem.MaSVColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDiemLanINull() {
                return this.IsNull(this.tableDiem.DiemLanIColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDiemLanINull() {
                this[this.tableDiem.DiemLanIColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDiemLanIINull() {
                return this.IsNull(this.tableDiem.DiemLanIIColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDiemLanIINull() {
                this[this.tableDiem.DiemLanIIColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLanThiNull() {
                return this.IsNull(this.tableDiem.LanThiColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLanThiNull() {
                this[this.tableDiem.LanThiColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNgayThiNull() {
                return this.IsNull(this.tableDiem.NgayThiColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNgayThiNull() {
                this[this.tableDiem.NgayThiColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGhiChuNull() {
                return this.IsNull(this.tableDiem.GhiChuColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGhiChuNull() {
                this[this.tableDiem.GhiChuColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHotenNull() {
                return this.IsNull(this.tableDiem.HotenColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHotenNull() {
                this[this.tableDiem.HotenColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTenMonHocNull() {
                return this.IsNull(this.tableDiem.TenMonHocColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTenMonHocNull() {
                this[this.tableDiem.TenMonHocColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSoTinChiNull() {
                return this.IsNull(this.tableDiem.SoTinChiColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSoTinChiNull() {
                this[this.tableDiem.SoTinChiColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DK_MonHocRow : global::System.Data.DataRow {
            
            private DK_MonHocDataTable tableDK_MonHoc;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DK_MonHocRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDK_MonHoc = ((DK_MonHocDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MaMonHoc {
                get {
                    try {
                        return ((string)(this[this.tableDK_MonHoc.MaMonHocColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MaMonHoc\' in table \'DK_MonHoc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDK_MonHoc.MaMonHocColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MaSinhVien {
                get {
                    try {
                        return ((string)(this[this.tableDK_MonHoc.MaSinhVienColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MaSinhVien\' in table \'DK_MonHoc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDK_MonHoc.MaSinhVienColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NgayDangKy {
                get {
                    try {
                        return ((string)(this[this.tableDK_MonHoc.NgayDangKyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NgayDangKy\' in table \'DK_MonHoc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDK_MonHoc.NgayDangKyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SoTinChi {
                get {
                    try {
                        return ((string)(this[this.tableDK_MonHoc.SoTinChiColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SoTinChi\' in table \'DK_MonHoc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDK_MonHoc.SoTinChiColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string HocKy {
                get {
                    try {
                        return ((string)(this[this.tableDK_MonHoc.HocKyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HocKy\' in table \'DK_MonHoc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDK_MonHoc.HocKyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMaMonHocNull() {
                return this.IsNull(this.tableDK_MonHoc.MaMonHocColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMaMonHocNull() {
                this[this.tableDK_MonHoc.MaMonHocColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMaSinhVienNull() {
                return this.IsNull(this.tableDK_MonHoc.MaSinhVienColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMaSinhVienNull() {
                this[this.tableDK_MonHoc.MaSinhVienColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNgayDangKyNull() {
                return this.IsNull(this.tableDK_MonHoc.NgayDangKyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNgayDangKyNull() {
                this[this.tableDK_MonHoc.NgayDangKyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSoTinChiNull() {
                return this.IsNull(this.tableDK_MonHoc.SoTinChiColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSoTinChiNull() {
                this[this.tableDK_MonHoc.SoTinChiColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHocKyNull() {
                return this.IsNull(this.tableDK_MonHoc.HocKyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHocKyNull() {
                this[this.tableDK_MonHoc.HocKyColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GiaoVienRow : global::System.Data.DataRow {
            
            private GiaoVienDataTable tableGiaoVien;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GiaoVienRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGiaoVien = ((GiaoVienDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MaGiaoVien {
                get {
                    try {
                        return ((string)(this[this.tableGiaoVien.MaGiaoVienColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MaGiaoVien\' in table \'GiaoVien\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGiaoVien.MaGiaoVienColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TenGiaoVien {
                get {
                    try {
                        return ((string)(this[this.tableGiaoVien.TenGiaoVienColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TenGiaoVien\' in table \'GiaoVien\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGiaoVien.TenGiaoVienColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MaKhoa {
                get {
                    try {
                        return ((string)(this[this.tableGiaoVien.MaKhoaColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MaKhoa\' in table \'GiaoVien\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGiaoVien.MaKhoaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GhiChu {
                get {
                    try {
                        return ((string)(this[this.tableGiaoVien.GhiChuColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GhiChu\' in table \'GiaoVien\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGiaoVien.GhiChuColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMaGiaoVienNull() {
                return this.IsNull(this.tableGiaoVien.MaGiaoVienColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMaGiaoVienNull() {
                this[this.tableGiaoVien.MaGiaoVienColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTenGiaoVienNull() {
                return this.IsNull(this.tableGiaoVien.TenGiaoVienColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTenGiaoVienNull() {
                this[this.tableGiaoVien.TenGiaoVienColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMaKhoaNull() {
                return this.IsNull(this.tableGiaoVien.MaKhoaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMaKhoaNull() {
                this[this.tableGiaoVien.MaKhoaColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGhiChuNull() {
                return this.IsNull(this.tableGiaoVien.GhiChuColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGhiChuNull() {
                this[this.tableGiaoVien.GhiChuColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class HeRow : global::System.Data.DataRow {
            
            private HeDataTable tableHe;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal HeRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableHe = ((HeDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MaHe {
                get {
                    try {
                        return ((string)(this[this.tableHe.MaHeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MaHe\' in table \'He\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHe.MaHeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TenHe {
                get {
                    try {
                        return ((string)(this[this.tableHe.TenHeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TenHe\' in table \'He\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHe.TenHeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GhiChu {
                get {
                    try {
                        return ((string)(this[this.tableHe.GhiChuColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GhiChu\' in table \'He\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHe.GhiChuColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMaHeNull() {
                return this.IsNull(this.tableHe.MaHeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMaHeNull() {
                this[this.tableHe.MaHeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTenHeNull() {
                return this.IsNull(this.tableHe.TenHeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTenHeNull() {
                this[this.tableHe.TenHeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGhiChuNull() {
                return this.IsNull(this.tableHe.GhiChuColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGhiChuNull() {
                this[this.tableHe.GhiChuColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class KhoaRow : global::System.Data.DataRow {
            
            private KhoaDataTable tableKhoa;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal KhoaRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableKhoa = ((KhoaDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MaKhoa {
                get {
                    try {
                        return ((string)(this[this.tableKhoa.MaKhoaColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MaKhoa\' in table \'Khoa\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableKhoa.MaKhoaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TenKhoa {
                get {
                    try {
                        return ((string)(this[this.tableKhoa.TenKhoaColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TenKhoa\' in table \'Khoa\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableKhoa.TenKhoaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GhiChu {
                get {
                    try {
                        return ((string)(this[this.tableKhoa.GhiChuColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GhiChu\' in table \'Khoa\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableKhoa.GhiChuColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMaKhoaNull() {
                return this.IsNull(this.tableKhoa.MaKhoaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMaKhoaNull() {
                this[this.tableKhoa.MaKhoaColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTenKhoaNull() {
                return this.IsNull(this.tableKhoa.TenKhoaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTenKhoaNull() {
                this[this.tableKhoa.TenKhoaColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGhiChuNull() {
                return this.IsNull(this.tableKhoa.GhiChuColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGhiChuNull() {
                this[this.tableKhoa.GhiChuColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class KhoaHocRow : global::System.Data.DataRow {
            
            private KhoaHocDataTable tableKhoaHoc;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal KhoaHocRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableKhoaHoc = ((KhoaHocDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MaKhoaHoc {
                get {
                    try {
                        return ((string)(this[this.tableKhoaHoc.MaKhoaHocColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MaKhoaHoc\' in table \'KhoaHoc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableKhoaHoc.MaKhoaHocColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TenKhoaHoc {
                get {
                    try {
                        return ((string)(this[this.tableKhoaHoc.TenKhoaHocColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TenKhoaHoc\' in table \'KhoaHoc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableKhoaHoc.TenKhoaHocColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NgayBatDau {
                get {
                    try {
                        return ((string)(this[this.tableKhoaHoc.NgayBatDauColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NgayBatDau\' in table \'KhoaHoc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableKhoaHoc.NgayBatDauColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NgayKetThuc {
                get {
                    try {
                        return ((string)(this[this.tableKhoaHoc.NgayKetThucColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NgayKetThuc\' in table \'KhoaHoc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableKhoaHoc.NgayKetThucColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GhiChu {
                get {
                    try {
                        return ((string)(this[this.tableKhoaHoc.GhiChuColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GhiChu\' in table \'KhoaHoc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableKhoaHoc.GhiChuColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMaKhoaHocNull() {
                return this.IsNull(this.tableKhoaHoc.MaKhoaHocColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMaKhoaHocNull() {
                this[this.tableKhoaHoc.MaKhoaHocColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTenKhoaHocNull() {
                return this.IsNull(this.tableKhoaHoc.TenKhoaHocColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTenKhoaHocNull() {
                this[this.tableKhoaHoc.TenKhoaHocColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNgayBatDauNull() {
                return this.IsNull(this.tableKhoaHoc.NgayBatDauColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNgayBatDauNull() {
                this[this.tableKhoaHoc.NgayBatDauColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNgayKetThucNull() {
                return this.IsNull(this.tableKhoaHoc.NgayKetThucColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNgayKetThucNull() {
                this[this.tableKhoaHoc.NgayKetThucColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGhiChuNull() {
                return this.IsNull(this.tableKhoaHoc.GhiChuColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGhiChuNull() {
                this[this.tableKhoaHoc.GhiChuColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LopRow : global::System.Data.DataRow {
            
            private LopDataTable tableLop;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LopRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLop = ((LopDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MaLop {
                get {
                    try {
                        return ((string)(this[this.tableLop.MaLopColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MaLop\' in table \'Lop\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLop.MaLopColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MaKhoaHoc {
                get {
                    try {
                        return ((string)(this[this.tableLop.MaKhoaHocColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MaKhoaHoc\' in table \'Lop\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLop.MaKhoaHocColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MaNganh {
                get {
                    try {
                        return ((string)(this[this.tableLop.MaNganhColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MaNganh\' in table \'Lop\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLop.MaNganhColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TenLop {
                get {
                    try {
                        return ((string)(this[this.tableLop.TenLopColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TenLop\' in table \'Lop\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLop.TenLopColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GhiChu {
                get {
                    try {
                        return ((string)(this[this.tableLop.GhiChuColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GhiChu\' in table \'Lop\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLop.GhiChuColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMaLopNull() {
                return this.IsNull(this.tableLop.MaLopColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMaLopNull() {
                this[this.tableLop.MaLopColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMaKhoaHocNull() {
                return this.IsNull(this.tableLop.MaKhoaHocColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMaKhoaHocNull() {
                this[this.tableLop.MaKhoaHocColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMaNganhNull() {
                return this.IsNull(this.tableLop.MaNganhColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMaNganhNull() {
                this[this.tableLop.MaNganhColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTenLopNull() {
                return this.IsNull(this.tableLop.TenLopColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTenLopNull() {
                this[this.tableLop.TenLopColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGhiChuNull() {
                return this.IsNull(this.tableLop.GhiChuColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGhiChuNull() {
                this[this.tableLop.GhiChuColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class MonHocRow : global::System.Data.DataRow {
            
            private MonHocDataTable tableMonHoc;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MonHocRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableMonHoc = ((MonHocDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MaMonHoc {
                get {
                    try {
                        return ((string)(this[this.tableMonHoc.MaMonHocColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MaMonHoc\' in table \'MonHoc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMonHoc.MaMonHocColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TenMonHoc {
                get {
                    try {
                        return ((string)(this[this.tableMonHoc.TenMonHocColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TenMonHoc\' in table \'MonHoc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMonHoc.TenMonHocColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MaKhoa {
                get {
                    try {
                        return ((string)(this[this.tableMonHoc.MaKhoaColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MaKhoa\' in table \'MonHoc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMonHoc.MaKhoaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SoTinChi {
                get {
                    try {
                        return ((string)(this[this.tableMonHoc.SoTinChiColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SoTinChi\' in table \'MonHoc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMonHoc.SoTinChiColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string HinhThuc {
                get {
                    try {
                        return ((string)(this[this.tableMonHoc.HinhThucColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HinhThuc\' in table \'MonHoc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMonHoc.HinhThucColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TongSoTiet {
                get {
                    try {
                        return ((string)(this[this.tableMonHoc.TongSoTietColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TongSoTiet\' in table \'MonHoc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMonHoc.TongSoTietColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SoTietLyThuyet {
                get {
                    try {
                        return ((string)(this[this.tableMonHoc.SoTietLyThuyetColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SoTietLyThuyet\' in table \'MonHoc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMonHoc.SoTietLyThuyetColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SoTietThucHanh {
                get {
                    try {
                        return ((string)(this[this.tableMonHoc.SoTietThucHanhColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SoTietThucHanh\' in table \'MonHoc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMonHoc.SoTietThucHanhColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GhiChu {
                get {
                    try {
                        return ((string)(this[this.tableMonHoc.GhiChuColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GhiChu\' in table \'MonHoc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMonHoc.GhiChuColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TenKhoa {
                get {
                    try {
                        return ((string)(this[this.tableMonHoc.TenKhoaColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TenKhoa\' in table \'MonHoc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMonHoc.TenKhoaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMaMonHocNull() {
                return this.IsNull(this.tableMonHoc.MaMonHocColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMaMonHocNull() {
                this[this.tableMonHoc.MaMonHocColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTenMonHocNull() {
                return this.IsNull(this.tableMonHoc.TenMonHocColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTenMonHocNull() {
                this[this.tableMonHoc.TenMonHocColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMaKhoaNull() {
                return this.IsNull(this.tableMonHoc.MaKhoaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMaKhoaNull() {
                this[this.tableMonHoc.MaKhoaColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSoTinChiNull() {
                return this.IsNull(this.tableMonHoc.SoTinChiColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSoTinChiNull() {
                this[this.tableMonHoc.SoTinChiColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHinhThucNull() {
                return this.IsNull(this.tableMonHoc.HinhThucColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHinhThucNull() {
                this[this.tableMonHoc.HinhThucColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTongSoTietNull() {
                return this.IsNull(this.tableMonHoc.TongSoTietColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTongSoTietNull() {
                this[this.tableMonHoc.TongSoTietColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSoTietLyThuyetNull() {
                return this.IsNull(this.tableMonHoc.SoTietLyThuyetColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSoTietLyThuyetNull() {
                this[this.tableMonHoc.SoTietLyThuyetColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSoTietThucHanhNull() {
                return this.IsNull(this.tableMonHoc.SoTietThucHanhColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSoTietThucHanhNull() {
                this[this.tableMonHoc.SoTietThucHanhColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGhiChuNull() {
                return this.IsNull(this.tableMonHoc.GhiChuColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGhiChuNull() {
                this[this.tableMonHoc.GhiChuColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTenKhoaNull() {
                return this.IsNull(this.tableMonHoc.TenKhoaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTenKhoaNull() {
                this[this.tableMonHoc.TenKhoaColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DiemRow[] GetDiemRows() {
                if ((this.Table.ChildRelations["FK_Diem_MonHoc"] == null)) {
                    return new DiemRow[0];
                }
                else {
                    return ((DiemRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Diem_MonHoc"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class NganhRow : global::System.Data.DataRow {
            
            private NganhDataTable tableNganh;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal NganhRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableNganh = ((NganhDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MaNganh {
                get {
                    try {
                        return ((string)(this[this.tableNganh.MaNganhColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MaNganh\' in table \'Nganh\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNganh.MaNganhColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MaHe {
                get {
                    try {
                        return ((string)(this[this.tableNganh.MaHeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MaHe\' in table \'Nganh\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNganh.MaHeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TenNganh {
                get {
                    try {
                        return ((string)(this[this.tableNganh.TenNganhColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TenNganh\' in table \'Nganh\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNganh.TenNganhColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GhiChu {
                get {
                    try {
                        return ((string)(this[this.tableNganh.GhiChuColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GhiChu\' in table \'Nganh\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNganh.GhiChuColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMaNganhNull() {
                return this.IsNull(this.tableNganh.MaNganhColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMaNganhNull() {
                this[this.tableNganh.MaNganhColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMaHeNull() {
                return this.IsNull(this.tableNganh.MaHeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMaHeNull() {
                this[this.tableNganh.MaHeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTenNganhNull() {
                return this.IsNull(this.tableNganh.TenNganhColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTenNganhNull() {
                this[this.tableNganh.TenNganhColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGhiChuNull() {
                return this.IsNull(this.tableNganh.GhiChuColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGhiChuNull() {
                this[this.tableNganh.GhiChuColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SinhVienRow : global::System.Data.DataRow {
            
            private SinhVienDataTable tableSinhVien;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SinhVienRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSinhVien = ((SinhVienDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MaSinhVien {
                get {
                    try {
                        return ((string)(this[this.tableSinhVien.MaSinhVienColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MaSinhVien\' in table \'SinhVien\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSinhVien.MaSinhVienColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string HoTen {
                get {
                    try {
                        return ((string)(this[this.tableSinhVien.HoTenColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HoTen\' in table \'SinhVien\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSinhVien.HoTenColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string QueQuan {
                get {
                    try {
                        return ((string)(this[this.tableSinhVien.QueQuanColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'QueQuan\' in table \'SinhVien\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSinhVien.QueQuanColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NgaySinh {
                get {
                    try {
                        return ((string)(this[this.tableSinhVien.NgaySinhColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NgaySinh\' in table \'SinhVien\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSinhVien.NgaySinhColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NoiSinh {
                get {
                    try {
                        return ((string)(this[this.tableSinhVien.NoiSinhColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NoiSinh\' in table \'SinhVien\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSinhVien.NoiSinhColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GioiTinh {
                get {
                    try {
                        return ((string)(this[this.tableSinhVien.GioiTinhColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GioiTinh\' in table \'SinhVien\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSinhVien.GioiTinhColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MaLop {
                get {
                    try {
                        return ((string)(this[this.tableSinhVien.MaLopColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MaLop\' in table \'SinhVien\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSinhVien.MaLopColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Hinh {
                get {
                    try {
                        return ((string)(this[this.tableSinhVien.HinhColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Hinh\' in table \'SinhVien\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSinhVien.HinhColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Ghichu {
                get {
                    try {
                        return ((string)(this[this.tableSinhVien.GhichuColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Ghichu\' in table \'SinhVien\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSinhVien.GhichuColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TenKhoaHoc {
                get {
                    try {
                        return ((string)(this[this.tableSinhVien.TenKhoaHocColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TenKhoaHoc\' in table \'SinhVien\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSinhVien.TenKhoaHocColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TenLop {
                get {
                    try {
                        return ((string)(this[this.tableSinhVien.TenLopColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TenLop\' in table \'SinhVien\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSinhVien.TenLopColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMaSinhVienNull() {
                return this.IsNull(this.tableSinhVien.MaSinhVienColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMaSinhVienNull() {
                this[this.tableSinhVien.MaSinhVienColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHoTenNull() {
                return this.IsNull(this.tableSinhVien.HoTenColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHoTenNull() {
                this[this.tableSinhVien.HoTenColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsQueQuanNull() {
                return this.IsNull(this.tableSinhVien.QueQuanColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetQueQuanNull() {
                this[this.tableSinhVien.QueQuanColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNgaySinhNull() {
                return this.IsNull(this.tableSinhVien.NgaySinhColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNgaySinhNull() {
                this[this.tableSinhVien.NgaySinhColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNoiSinhNull() {
                return this.IsNull(this.tableSinhVien.NoiSinhColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNoiSinhNull() {
                this[this.tableSinhVien.NoiSinhColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGioiTinhNull() {
                return this.IsNull(this.tableSinhVien.GioiTinhColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGioiTinhNull() {
                this[this.tableSinhVien.GioiTinhColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMaLopNull() {
                return this.IsNull(this.tableSinhVien.MaLopColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMaLopNull() {
                this[this.tableSinhVien.MaLopColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHinhNull() {
                return this.IsNull(this.tableSinhVien.HinhColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHinhNull() {
                this[this.tableSinhVien.HinhColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGhichuNull() {
                return this.IsNull(this.tableSinhVien.GhichuColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGhichuNull() {
                this[this.tableSinhVien.GhichuColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTenKhoaHocNull() {
                return this.IsNull(this.tableSinhVien.TenKhoaHocColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTenKhoaHocNull() {
                this[this.tableSinhVien.TenKhoaHocColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTenLopNull() {
                return this.IsNull(this.tableSinhVien.TenLopColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTenLopNull() {
                this[this.tableSinhVien.TenLopColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DiemRow[] GetDiemRows() {
                if ((this.Table.ChildRelations["FK_SinhVien_Diem"] == null)) {
                    return new DiemRow[0];
                }
                else {
                    return ((DiemRow[])(base.GetChildRows(this.Table.ChildRelations["FK_SinhVien_Diem"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class tb_UserRow : global::System.Data.DataRow {
            
            private tb_UserDataTable tabletb_User;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tb_UserRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabletb_User = ((tb_UserDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Username {
                get {
                    try {
                        return ((string)(this[this.tabletb_User.UsernameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Username\' in table \'tb_User\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletb_User.UsernameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Pass {
                get {
                    try {
                        return ((string)(this[this.tabletb_User.PassColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Pass\' in table \'tb_User\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletb_User.PassColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUsernameNull() {
                return this.IsNull(this.tabletb_User.UsernameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUsernameNull() {
                this[this.tabletb_User.UsernameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPassNull() {
                return this.IsNull(this.tabletb_User.PassColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPassNull() {
                this[this.tabletb_User.PassColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DiemRowChangeEvent : global::System.EventArgs {
            
            private DiemRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DiemRowChangeEvent(DiemRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DiemRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DK_MonHocRowChangeEvent : global::System.EventArgs {
            
            private DK_MonHocRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DK_MonHocRowChangeEvent(DK_MonHocRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DK_MonHocRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GiaoVienRowChangeEvent : global::System.EventArgs {
            
            private GiaoVienRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GiaoVienRowChangeEvent(GiaoVienRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GiaoVienRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class HeRowChangeEvent : global::System.EventArgs {
            
            private HeRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HeRowChangeEvent(HeRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class KhoaRowChangeEvent : global::System.EventArgs {
            
            private KhoaRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public KhoaRowChangeEvent(KhoaRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public KhoaRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class KhoaHocRowChangeEvent : global::System.EventArgs {
            
            private KhoaHocRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public KhoaHocRowChangeEvent(KhoaHocRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public KhoaHocRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LopRowChangeEvent : global::System.EventArgs {
            
            private LopRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LopRowChangeEvent(LopRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LopRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class MonHocRowChangeEvent : global::System.EventArgs {
            
            private MonHocRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MonHocRowChangeEvent(MonHocRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MonHocRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class NganhRowChangeEvent : global::System.EventArgs {
            
            private NganhRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NganhRowChangeEvent(NganhRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NganhRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SinhVienRowChangeEvent : global::System.EventArgs {
            
            private SinhVienRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SinhVienRowChangeEvent(SinhVienRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SinhVienRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class tb_UserRowChangeEvent : global::System.EventArgs {
            
            private tb_UserRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tb_UserRowChangeEvent(tb_UserRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tb_UserRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591