#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DeTai_QuanLySinhVien
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="QuanLySinhVien")]
	public partial class QuanLySinhVienDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertKetQua(KetQua instance);
    partial void UpdateKetQua(KetQua instance);
    partial void DeleteKetQua(KetQua instance);
    partial void InsertKhoa(Khoa instance);
    partial void UpdateKhoa(Khoa instance);
    partial void DeleteKhoa(Khoa instance);
    partial void InsertLop(Lop instance);
    partial void UpdateLop(Lop instance);
    partial void DeleteLop(Lop instance);
    partial void InsertMonHoc(MonHoc instance);
    partial void UpdateMonHoc(MonHoc instance);
    partial void DeleteMonHoc(MonHoc instance);
    partial void InsertQuanLyNguoiDung(QuanLyNguoiDung instance);
    partial void UpdateQuanLyNguoiDung(QuanLyNguoiDung instance);
    partial void DeleteQuanLyNguoiDung(QuanLyNguoiDung instance);
    partial void InsertSinhVien(SinhVien instance);
    partial void UpdateSinhVien(SinhVien instance);
    partial void DeleteSinhVien(SinhVien instance);
    #endregion
		
		public QuanLySinhVienDataContext() : 
				base(global::DeTai_QuanLySinhVien.Properties.Settings.Default.QuanLySinhVienConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public QuanLySinhVienDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public QuanLySinhVienDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public QuanLySinhVienDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public QuanLySinhVienDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<KetQua> KetQuas
		{
			get
			{
				return this.GetTable<KetQua>();
			}
		}
		
		public System.Data.Linq.Table<Khoa> Khoas
		{
			get
			{
				return this.GetTable<Khoa>();
			}
		}
		
		public System.Data.Linq.Table<Lop> Lops
		{
			get
			{
				return this.GetTable<Lop>();
			}
		}
		
		public System.Data.Linq.Table<MonHoc> MonHocs
		{
			get
			{
				return this.GetTable<MonHoc>();
			}
		}
		
		public System.Data.Linq.Table<QuanLyNguoiDung> QuanLyNguoiDungs
		{
			get
			{
				return this.GetTable<QuanLyNguoiDung>();
			}
		}
		
		public System.Data.Linq.Table<SinhVien> SinhViens
		{
			get
			{
				return this.GetTable<SinhVien>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.KetQua")]
	public partial class KetQua : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ID_MonHoc;
		
		private string _ID_SinhVien;
		
		private int _LanThi;
		
		private double _DiemThi;
		
		private double _DiemTongKet;
		
		private EntityRef<MonHoc> _MonHoc;
		
		private EntityRef<SinhVien> _SinhVien;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_MonHocChanging(string value);
    partial void OnID_MonHocChanged();
    partial void OnID_SinhVienChanging(string value);
    partial void OnID_SinhVienChanged();
    partial void OnLanThiChanging(int value);
    partial void OnLanThiChanged();
    partial void OnDiemThiChanging(double value);
    partial void OnDiemThiChanged();
    partial void OnDiemTongKetChanging(double value);
    partial void OnDiemTongKetChanged();
    #endregion
		
		public KetQua()
		{
			this._MonHoc = default(EntityRef<MonHoc>);
			this._SinhVien = default(EntityRef<SinhVien>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_MonHoc", DbType="NChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ID_MonHoc
		{
			get
			{
				return this._ID_MonHoc;
			}
			set
			{
				if ((this._ID_MonHoc != value))
				{
					if (this._MonHoc.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_MonHocChanging(value);
					this.SendPropertyChanging();
					this._ID_MonHoc = value;
					this.SendPropertyChanged("ID_MonHoc");
					this.OnID_MonHocChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_SinhVien", DbType="NChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ID_SinhVien
		{
			get
			{
				return this._ID_SinhVien;
			}
			set
			{
				if ((this._ID_SinhVien != value))
				{
					if (this._SinhVien.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_SinhVienChanging(value);
					this.SendPropertyChanging();
					this._ID_SinhVien = value;
					this.SendPropertyChanged("ID_SinhVien");
					this.OnID_SinhVienChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LanThi", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int LanThi
		{
			get
			{
				return this._LanThi;
			}
			set
			{
				if ((this._LanThi != value))
				{
					this.OnLanThiChanging(value);
					this.SendPropertyChanging();
					this._LanThi = value;
					this.SendPropertyChanged("LanThi");
					this.OnLanThiChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DiemThi", DbType="Float NOT NULL")]
		public double DiemThi
		{
			get
			{
				return this._DiemThi;
			}
			set
			{
				if ((this._DiemThi != value))
				{
					this.OnDiemThiChanging(value);
					this.SendPropertyChanging();
					this._DiemThi = value;
					this.SendPropertyChanged("DiemThi");
					this.OnDiemThiChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DiemTongKet", DbType="Float NOT NULL")]
		public double DiemTongKet
		{
			get
			{
				return this._DiemTongKet;
			}
			set
			{
				if ((this._DiemTongKet != value))
				{
					this.OnDiemTongKetChanging(value);
					this.SendPropertyChanging();
					this._DiemTongKet = value;
					this.SendPropertyChanged("DiemTongKet");
					this.OnDiemTongKetChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MonHoc_KetQua", Storage="_MonHoc", ThisKey="ID_MonHoc", OtherKey="MonHoc_ID", IsForeignKey=true)]
		public MonHoc MonHoc
		{
			get
			{
				return this._MonHoc.Entity;
			}
			set
			{
				MonHoc previousValue = this._MonHoc.Entity;
				if (((previousValue != value) 
							|| (this._MonHoc.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MonHoc.Entity = null;
						previousValue.KetQuas.Remove(this);
					}
					this._MonHoc.Entity = value;
					if ((value != null))
					{
						value.KetQuas.Add(this);
						this._ID_MonHoc = value.MonHoc_ID;
					}
					else
					{
						this._ID_MonHoc = default(string);
					}
					this.SendPropertyChanged("MonHoc");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SinhVien_KetQua", Storage="_SinhVien", ThisKey="ID_SinhVien", OtherKey="SinhVien_ID", IsForeignKey=true)]
		public SinhVien SinhVien
		{
			get
			{
				return this._SinhVien.Entity;
			}
			set
			{
				SinhVien previousValue = this._SinhVien.Entity;
				if (((previousValue != value) 
							|| (this._SinhVien.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SinhVien.Entity = null;
						previousValue.KetQuas.Remove(this);
					}
					this._SinhVien.Entity = value;
					if ((value != null))
					{
						value.KetQuas.Add(this);
						this._ID_SinhVien = value.SinhVien_ID;
					}
					else
					{
						this._ID_SinhVien = default(string);
					}
					this.SendPropertyChanged("SinhVien");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Khoa")]
	public partial class Khoa : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Khoa_ID;
		
		private string _TenKhoa;
		
		private EntitySet<Lop> _Lops;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnKhoa_IDChanging(string value);
    partial void OnKhoa_IDChanged();
    partial void OnTenKhoaChanging(string value);
    partial void OnTenKhoaChanged();
    #endregion
		
		public Khoa()
		{
			this._Lops = new EntitySet<Lop>(new Action<Lop>(this.attach_Lops), new Action<Lop>(this.detach_Lops));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Khoa_ID", DbType="NChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Khoa_ID
		{
			get
			{
				return this._Khoa_ID;
			}
			set
			{
				if ((this._Khoa_ID != value))
				{
					this.OnKhoa_IDChanging(value);
					this.SendPropertyChanging();
					this._Khoa_ID = value;
					this.SendPropertyChanged("Khoa_ID");
					this.OnKhoa_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TenKhoa", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string TenKhoa
		{
			get
			{
				return this._TenKhoa;
			}
			set
			{
				if ((this._TenKhoa != value))
				{
					this.OnTenKhoaChanging(value);
					this.SendPropertyChanging();
					this._TenKhoa = value;
					this.SendPropertyChanged("TenKhoa");
					this.OnTenKhoaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Khoa_Lop", Storage="_Lops", ThisKey="Khoa_ID", OtherKey="ID_Khoa")]
		public EntitySet<Lop> Lops
		{
			get
			{
				return this._Lops;
			}
			set
			{
				this._Lops.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Lops(Lop entity)
		{
			this.SendPropertyChanging();
			entity.Khoa = this;
		}
		
		private void detach_Lops(Lop entity)
		{
			this.SendPropertyChanging();
			entity.Khoa = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Lop")]
	public partial class Lop : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Lop_ID;
		
		private string _TenLop;
		
		private string _ID_Khoa;
		
		private EntitySet<SinhVien> _SinhViens;
		
		private EntityRef<Khoa> _Khoa;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLop_IDChanging(string value);
    partial void OnLop_IDChanged();
    partial void OnTenLopChanging(string value);
    partial void OnTenLopChanged();
    partial void OnID_KhoaChanging(string value);
    partial void OnID_KhoaChanged();
    #endregion
		
		public Lop()
		{
			this._SinhViens = new EntitySet<SinhVien>(new Action<SinhVien>(this.attach_SinhViens), new Action<SinhVien>(this.detach_SinhViens));
			this._Khoa = default(EntityRef<Khoa>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Lop_ID", DbType="NChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Lop_ID
		{
			get
			{
				return this._Lop_ID;
			}
			set
			{
				if ((this._Lop_ID != value))
				{
					this.OnLop_IDChanging(value);
					this.SendPropertyChanging();
					this._Lop_ID = value;
					this.SendPropertyChanged("Lop_ID");
					this.OnLop_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TenLop", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string TenLop
		{
			get
			{
				return this._TenLop;
			}
			set
			{
				if ((this._TenLop != value))
				{
					this.OnTenLopChanging(value);
					this.SendPropertyChanging();
					this._TenLop = value;
					this.SendPropertyChanged("TenLop");
					this.OnTenLopChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Khoa", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string ID_Khoa
		{
			get
			{
				return this._ID_Khoa;
			}
			set
			{
				if ((this._ID_Khoa != value))
				{
					if (this._Khoa.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_KhoaChanging(value);
					this.SendPropertyChanging();
					this._ID_Khoa = value;
					this.SendPropertyChanged("ID_Khoa");
					this.OnID_KhoaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Lop_SinhVien", Storage="_SinhViens", ThisKey="Lop_ID", OtherKey="ID_Lop")]
		public EntitySet<SinhVien> SinhViens
		{
			get
			{
				return this._SinhViens;
			}
			set
			{
				this._SinhViens.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Khoa_Lop", Storage="_Khoa", ThisKey="ID_Khoa", OtherKey="Khoa_ID", IsForeignKey=true)]
		public Khoa Khoa
		{
			get
			{
				return this._Khoa.Entity;
			}
			set
			{
				Khoa previousValue = this._Khoa.Entity;
				if (((previousValue != value) 
							|| (this._Khoa.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Khoa.Entity = null;
						previousValue.Lops.Remove(this);
					}
					this._Khoa.Entity = value;
					if ((value != null))
					{
						value.Lops.Add(this);
						this._ID_Khoa = value.Khoa_ID;
					}
					else
					{
						this._ID_Khoa = default(string);
					}
					this.SendPropertyChanged("Khoa");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SinhViens(SinhVien entity)
		{
			this.SendPropertyChanging();
			entity.Lop = this;
		}
		
		private void detach_SinhViens(SinhVien entity)
		{
			this.SendPropertyChanging();
			entity.Lop = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MonHoc")]
	public partial class MonHoc : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _MonHoc_ID;
		
		private string _TenMonHoc;
		
		private int _SoTrinh;
		
		private string _GiangVien;
		
		private EntitySet<KetQua> _KetQuas;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMonHoc_IDChanging(string value);
    partial void OnMonHoc_IDChanged();
    partial void OnTenMonHocChanging(string value);
    partial void OnTenMonHocChanged();
    partial void OnSoTrinhChanging(int value);
    partial void OnSoTrinhChanged();
    partial void OnGiangVienChanging(string value);
    partial void OnGiangVienChanged();
    #endregion
		
		public MonHoc()
		{
			this._KetQuas = new EntitySet<KetQua>(new Action<KetQua>(this.attach_KetQuas), new Action<KetQua>(this.detach_KetQuas));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MonHoc_ID", DbType="NChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string MonHoc_ID
		{
			get
			{
				return this._MonHoc_ID;
			}
			set
			{
				if ((this._MonHoc_ID != value))
				{
					this.OnMonHoc_IDChanging(value);
					this.SendPropertyChanging();
					this._MonHoc_ID = value;
					this.SendPropertyChanged("MonHoc_ID");
					this.OnMonHoc_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TenMonHoc", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string TenMonHoc
		{
			get
			{
				return this._TenMonHoc;
			}
			set
			{
				if ((this._TenMonHoc != value))
				{
					this.OnTenMonHocChanging(value);
					this.SendPropertyChanging();
					this._TenMonHoc = value;
					this.SendPropertyChanged("TenMonHoc");
					this.OnTenMonHocChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SoTrinh", DbType="Int NOT NULL")]
		public int SoTrinh
		{
			get
			{
				return this._SoTrinh;
			}
			set
			{
				if ((this._SoTrinh != value))
				{
					this.OnSoTrinhChanging(value);
					this.SendPropertyChanging();
					this._SoTrinh = value;
					this.SendPropertyChanged("SoTrinh");
					this.OnSoTrinhChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GiangVien", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string GiangVien
		{
			get
			{
				return this._GiangVien;
			}
			set
			{
				if ((this._GiangVien != value))
				{
					this.OnGiangVienChanging(value);
					this.SendPropertyChanging();
					this._GiangVien = value;
					this.SendPropertyChanged("GiangVien");
					this.OnGiangVienChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MonHoc_KetQua", Storage="_KetQuas", ThisKey="MonHoc_ID", OtherKey="ID_MonHoc")]
		public EntitySet<KetQua> KetQuas
		{
			get
			{
				return this._KetQuas;
			}
			set
			{
				this._KetQuas.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_KetQuas(KetQua entity)
		{
			this.SendPropertyChanging();
			entity.MonHoc = this;
		}
		
		private void detach_KetQuas(KetQua entity)
		{
			this.SendPropertyChanging();
			entity.MonHoc = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.QuanLyNguoiDung")]
	public partial class QuanLyNguoiDung : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _TenDangNhap;
		
		private string _MatKhau;
		
		private string _QuyenHan;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTenDangNhapChanging(string value);
    partial void OnTenDangNhapChanged();
    partial void OnMatKhauChanging(string value);
    partial void OnMatKhauChanged();
    partial void OnQuyenHanChanging(string value);
    partial void OnQuyenHanChanged();
    #endregion
		
		public QuanLyNguoiDung()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TenDangNhap", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string TenDangNhap
		{
			get
			{
				return this._TenDangNhap;
			}
			set
			{
				if ((this._TenDangNhap != value))
				{
					this.OnTenDangNhapChanging(value);
					this.SendPropertyChanging();
					this._TenDangNhap = value;
					this.SendPropertyChanged("TenDangNhap");
					this.OnTenDangNhapChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MatKhau", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string MatKhau
		{
			get
			{
				return this._MatKhau;
			}
			set
			{
				if ((this._MatKhau != value))
				{
					this.OnMatKhauChanging(value);
					this.SendPropertyChanging();
					this._MatKhau = value;
					this.SendPropertyChanged("MatKhau");
					this.OnMatKhauChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuyenHan", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string QuyenHan
		{
			get
			{
				return this._QuyenHan;
			}
			set
			{
				if ((this._QuyenHan != value))
				{
					this.OnQuyenHanChanging(value);
					this.SendPropertyChanging();
					this._QuyenHan = value;
					this.SendPropertyChanged("QuyenHan");
					this.OnQuyenHanChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SinhVien")]
	public partial class SinhVien : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _SinhVien_ID;
		
		private string _TenSinhVien;
		
		private byte _GioiTinh;
		
		private System.DateTime _NgaySinh;
		
		private string _NoiSinh;
		
		private string _NoiOHienTai;
		
		private string _KhoaHoc;
		
		private string _LyLich;
		
		private string _ID_Lop;
		
		private string _HinhAnh;
		
		private EntitySet<KetQua> _KetQuas;
		
		private EntityRef<Lop> _Lop;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSinhVien_IDChanging(string value);
    partial void OnSinhVien_IDChanged();
    partial void OnTenSinhVienChanging(string value);
    partial void OnTenSinhVienChanged();
    partial void OnGioiTinhChanging(byte value);
    partial void OnGioiTinhChanged();
    partial void OnNgaySinhChanging(System.DateTime value);
    partial void OnNgaySinhChanged();
    partial void OnNoiSinhChanging(string value);
    partial void OnNoiSinhChanged();
    partial void OnNoiOHienTaiChanging(string value);
    partial void OnNoiOHienTaiChanged();
    partial void OnKhoaHocChanging(string value);
    partial void OnKhoaHocChanged();
    partial void OnLyLichChanging(string value);
    partial void OnLyLichChanged();
    partial void OnID_LopChanging(string value);
    partial void OnID_LopChanged();
    partial void OnHinhAnhChanging(string value);
    partial void OnHinhAnhChanged();
    #endregion
		
		public SinhVien()
		{
			this._KetQuas = new EntitySet<KetQua>(new Action<KetQua>(this.attach_KetQuas), new Action<KetQua>(this.detach_KetQuas));
			this._Lop = default(EntityRef<Lop>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SinhVien_ID", DbType="NChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string SinhVien_ID
		{
			get
			{
				return this._SinhVien_ID;
			}
			set
			{
				if ((this._SinhVien_ID != value))
				{
					this.OnSinhVien_IDChanging(value);
					this.SendPropertyChanging();
					this._SinhVien_ID = value;
					this.SendPropertyChanged("SinhVien_ID");
					this.OnSinhVien_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TenSinhVien", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string TenSinhVien
		{
			get
			{
				return this._TenSinhVien;
			}
			set
			{
				if ((this._TenSinhVien != value))
				{
					this.OnTenSinhVienChanging(value);
					this.SendPropertyChanging();
					this._TenSinhVien = value;
					this.SendPropertyChanged("TenSinhVien");
					this.OnTenSinhVienChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GioiTinh", DbType="TinyInt NOT NULL")]
		public byte GioiTinh
		{
			get
			{
				return this._GioiTinh;
			}
			set
			{
				if ((this._GioiTinh != value))
				{
					this.OnGioiTinhChanging(value);
					this.SendPropertyChanging();
					this._GioiTinh = value;
					this.SendPropertyChanged("GioiTinh");
					this.OnGioiTinhChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NgaySinh", DbType="DateTime NOT NULL")]
		public System.DateTime NgaySinh
		{
			get
			{
				return this._NgaySinh;
			}
			set
			{
				if ((this._NgaySinh != value))
				{
					this.OnNgaySinhChanging(value);
					this.SendPropertyChanging();
					this._NgaySinh = value;
					this.SendPropertyChanged("NgaySinh");
					this.OnNgaySinhChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NoiSinh", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string NoiSinh
		{
			get
			{
				return this._NoiSinh;
			}
			set
			{
				if ((this._NoiSinh != value))
				{
					this.OnNoiSinhChanging(value);
					this.SendPropertyChanging();
					this._NoiSinh = value;
					this.SendPropertyChanged("NoiSinh");
					this.OnNoiSinhChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NoiOHienTai", DbType="NVarChar(50)")]
		public string NoiOHienTai
		{
			get
			{
				return this._NoiOHienTai;
			}
			set
			{
				if ((this._NoiOHienTai != value))
				{
					this.OnNoiOHienTaiChanging(value);
					this.SendPropertyChanging();
					this._NoiOHienTai = value;
					this.SendPropertyChanged("NoiOHienTai");
					this.OnNoiOHienTaiChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_KhoaHoc", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string KhoaHoc
		{
			get
			{
				return this._KhoaHoc;
			}
			set
			{
				if ((this._KhoaHoc != value))
				{
					this.OnKhoaHocChanging(value);
					this.SendPropertyChanging();
					this._KhoaHoc = value;
					this.SendPropertyChanged("KhoaHoc");
					this.OnKhoaHocChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LyLich", DbType="NVarChar(1000) NOT NULL", CanBeNull=false)]
		public string LyLich
		{
			get
			{
				return this._LyLich;
			}
			set
			{
				if ((this._LyLich != value))
				{
					this.OnLyLichChanging(value);
					this.SendPropertyChanging();
					this._LyLich = value;
					this.SendPropertyChanged("LyLich");
					this.OnLyLichChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Lop", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string ID_Lop
		{
			get
			{
				return this._ID_Lop;
			}
			set
			{
				if ((this._ID_Lop != value))
				{
					if (this._Lop.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_LopChanging(value);
					this.SendPropertyChanging();
					this._ID_Lop = value;
					this.SendPropertyChanged("ID_Lop");
					this.OnID_LopChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HinhAnh", DbType="NVarChar(50)")]
		public string HinhAnh
		{
			get
			{
				return this._HinhAnh;
			}
			set
			{
				if ((this._HinhAnh != value))
				{
					this.OnHinhAnhChanging(value);
					this.SendPropertyChanging();
					this._HinhAnh = value;
					this.SendPropertyChanged("HinhAnh");
					this.OnHinhAnhChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SinhVien_KetQua", Storage="_KetQuas", ThisKey="SinhVien_ID", OtherKey="ID_SinhVien")]
		public EntitySet<KetQua> KetQuas
		{
			get
			{
				return this._KetQuas;
			}
			set
			{
				this._KetQuas.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Lop_SinhVien", Storage="_Lop", ThisKey="ID_Lop", OtherKey="Lop_ID", IsForeignKey=true)]
		public Lop Lop
		{
			get
			{
				return this._Lop.Entity;
			}
			set
			{
				Lop previousValue = this._Lop.Entity;
				if (((previousValue != value) 
							|| (this._Lop.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Lop.Entity = null;
						previousValue.SinhViens.Remove(this);
					}
					this._Lop.Entity = value;
					if ((value != null))
					{
						value.SinhViens.Add(this);
						this._ID_Lop = value.Lop_ID;
					}
					else
					{
						this._ID_Lop = default(string);
					}
					this.SendPropertyChanged("Lop");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_KetQuas(KetQua entity)
		{
			this.SendPropertyChanging();
			entity.SinhVien = this;
		}
		
		private void detach_KetQuas(KetQua entity)
		{
			this.SendPropertyChanging();
			entity.SinhVien = null;
		}
	}
}
#pragma warning restore 1591
